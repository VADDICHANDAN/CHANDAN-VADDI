{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "252b7bec",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from warnings import filterwarnings\n",
    "filterwarnings('ignore')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "597a18b5",
   "metadata": {},
   "source": [
    "### DataSet Understanding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b5158478",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>policy_id</th>\n",
       "      <th>policy_tenure</th>\n",
       "      <th>age_of_car</th>\n",
       "      <th>age_of_policyholder</th>\n",
       "      <th>area_cluster</th>\n",
       "      <th>population_density</th>\n",
       "      <th>make</th>\n",
       "      <th>segment</th>\n",
       "      <th>model</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>...</th>\n",
       "      <th>is_brake_assist</th>\n",
       "      <th>is_power_door_locks</th>\n",
       "      <th>is_central_locking</th>\n",
       "      <th>is_power_steering</th>\n",
       "      <th>is_driver_seat_height_adjustable</th>\n",
       "      <th>is_day_night_rear_view_mirror</th>\n",
       "      <th>is_ecw</th>\n",
       "      <th>is_speed_alert</th>\n",
       "      <th>ncap_rating</th>\n",
       "      <th>is_claim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ID00001</td>\n",
       "      <td>0.515874</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.644231</td>\n",
       "      <td>C1</td>\n",
       "      <td>4990</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>M1</td>\n",
       "      <td>cng</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ID00002</td>\n",
       "      <td>0.672619</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>C2</td>\n",
       "      <td>27003</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>M1</td>\n",
       "      <td>CNG</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ID00003</td>\n",
       "      <td>0.841110</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>C3</td>\n",
       "      <td>4076</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>M1</td>\n",
       "      <td>CNG</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ID00004</td>\n",
       "      <td>0.900277</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.432692</td>\n",
       "      <td>C4</td>\n",
       "      <td>21622</td>\n",
       "      <td>1</td>\n",
       "      <td>C1</td>\n",
       "      <td>M2</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>ID00005</td>\n",
       "      <td>0.596403</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.634615</td>\n",
       "      <td>C5</td>\n",
       "      <td>34738</td>\n",
       "      <td>2</td>\n",
       "      <td>A</td>\n",
       "      <td>M3</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  policy_id  policy_tenure  age_of_car  age_of_policyholder area_cluster  \\\n",
       "0   ID00001       0.515874        0.05             0.644231           C1   \n",
       "1   ID00002       0.672619        0.02             0.375000           C2   \n",
       "2   ID00003       0.841110        0.02             0.384615           C3   \n",
       "3   ID00004       0.900277        0.11             0.432692           C4   \n",
       "4   ID00005       0.596403        0.11             0.634615           C5   \n",
       "\n",
       "   population_density  make segment model fuel_type  ... is_brake_assist  \\\n",
       "0                4990     1       A    M1       cng  ...              No   \n",
       "1               27003     1       A    M1       CNG  ...              No   \n",
       "2                4076     1       A    M1       CNG  ...              No   \n",
       "3               21622     1      C1    M2    Petrol  ...             Yes   \n",
       "4               34738     2       A    M3    Petrol  ...              No   \n",
       "\n",
       "  is_power_door_locks is_central_locking  is_power_steering  \\\n",
       "0                  No                 No                Yes   \n",
       "1                  No                 No                Yes   \n",
       "2                  No                 No                Yes   \n",
       "3                 Yes                Yes                Yes   \n",
       "4                 Yes                Yes                Yes   \n",
       "\n",
       "  is_driver_seat_height_adjustable is_day_night_rear_view_mirror is_ecw  \\\n",
       "0                               No                            No     No   \n",
       "1                               No                            No     No   \n",
       "2                               No                            No     No   \n",
       "3                              Yes                           Yes    Yes   \n",
       "4                               No                           Yes    Yes   \n",
       "\n",
       "  is_speed_alert ncap_rating is_claim  \n",
       "0            Yes           0        0  \n",
       "1            Yes           0        0  \n",
       "2            Yes           0        0  \n",
       "3            Yes           2        0  \n",
       "4            Yes           2        0  \n",
       "\n",
       "[5 rows x 44 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Loading DataSet\n",
    "gb=pd.read_csv('dataset2tr.csv')\n",
    "gb.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "adb18e2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(58592, 44)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dimension of dataset\n",
    "gb.shape\n",
    "\n",
    "# number of rows = 58592\n",
    "# number of columns = 44"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7d5560dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 58592 entries, 0 to 58591\n",
      "Data columns (total 44 columns):\n",
      " #   Column                            Non-Null Count  Dtype  \n",
      "---  ------                            --------------  -----  \n",
      " 0   policy_id                         58592 non-null  object \n",
      " 1   policy_tenure                     58592 non-null  float64\n",
      " 2   age_of_car                        58592 non-null  float64\n",
      " 3   age_of_policyholder               58556 non-null  float64\n",
      " 4   area_cluster                      58091 non-null  object \n",
      " 5   population_density                58592 non-null  int64  \n",
      " 6   make                              58592 non-null  int64  \n",
      " 7   segment                           58592 non-null  object \n",
      " 8   model                             58592 non-null  object \n",
      " 9   fuel_type                         58592 non-null  object \n",
      " 10  max_torque                        58592 non-null  object \n",
      " 11  max_power                         58592 non-null  object \n",
      " 12  engine_type                       58070 non-null  object \n",
      " 13  airbags                           53680 non-null  float64\n",
      " 14  is_esc                            57392 non-null  object \n",
      " 15  is_adjustable_steering            58592 non-null  object \n",
      " 16  is_tpms                           58592 non-null  object \n",
      " 17  is_parking_sensors                56478 non-null  object \n",
      " 18  is_parking_camera                 58592 non-null  object \n",
      " 19  rear_brakes_type                  58592 non-null  object \n",
      " 20  displacement                      58592 non-null  int64  \n",
      " 21  cylinder                          58592 non-null  int64  \n",
      " 22  transmission_type                 58592 non-null  object \n",
      " 23  gear_box                          57347 non-null  float64\n",
      " 24  steering_type                     58592 non-null  object \n",
      " 25  turning_radius                    58592 non-null  object \n",
      " 26  length                            58592 non-null  int64  \n",
      " 27  width                             58592 non-null  int64  \n",
      " 28  height                            58592 non-null  int64  \n",
      " 29  gross_weight                      58592 non-null  int64  \n",
      " 30  is_front_fog_lights               58592 non-null  object \n",
      " 31  is_rear_window_wiper              58592 non-null  object \n",
      " 32  is_rear_window_washer             58592 non-null  object \n",
      " 33  is_rear_window_defogger           58592 non-null  object \n",
      " 34  is_brake_assist                   58592 non-null  object \n",
      " 35  is_power_door_locks               58592 non-null  object \n",
      " 36  is_central_locking                58592 non-null  object \n",
      " 37  is_power_steering                 58483 non-null  object \n",
      " 38  is_driver_seat_height_adjustable  58592 non-null  object \n",
      " 39  is_day_night_rear_view_mirror     58592 non-null  object \n",
      " 40  is_ecw                            58592 non-null  object \n",
      " 41  is_speed_alert                    58484 non-null  object \n",
      " 42  ncap_rating                       58592 non-null  int64  \n",
      " 43  is_claim                          58592 non-null  int64  \n",
      "dtypes: float64(5), int64(10), object(29)\n",
      "memory usage: 19.7+ MB\n"
     ]
    }
   ],
   "source": [
    "# Verifying datatypes of the columns\n",
    "gb.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "414fdde0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "policy_id                           58592\n",
       "policy_tenure                       58591\n",
       "age_of_car                             49\n",
       "age_of_policyholder                    75\n",
       "area_cluster                           22\n",
       "population_density                     22\n",
       "make                                    5\n",
       "segment                                 6\n",
       "model                                  11\n",
       "fuel_type                               6\n",
       "max_torque                              9\n",
       "max_power                               9\n",
       "engine_type                            11\n",
       "airbags                                 3\n",
       "is_esc                                  2\n",
       "is_adjustable_steering                  2\n",
       "is_tpms                                 2\n",
       "is_parking_sensors                      2\n",
       "is_parking_camera                       2\n",
       "rear_brakes_type                        2\n",
       "displacement                            9\n",
       "cylinder                                2\n",
       "transmission_type                       2\n",
       "gear_box                                2\n",
       "steering_type                           3\n",
       "turning_radius                         18\n",
       "length                                  9\n",
       "width                                  10\n",
       "height                                 11\n",
       "gross_weight                           10\n",
       "is_front_fog_lights                     2\n",
       "is_rear_window_wiper                    2\n",
       "is_rear_window_washer                   2\n",
       "is_rear_window_defogger                 2\n",
       "is_brake_assist                         2\n",
       "is_power_door_locks                     2\n",
       "is_central_locking                      2\n",
       "is_power_steering                       2\n",
       "is_driver_seat_height_adjustable        2\n",
       "is_day_night_rear_view_mirror           2\n",
       "is_ecw                                  2\n",
       "is_speed_alert                          2\n",
       "ncap_rating                             5\n",
       "is_claim                                2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gb.nunique()\n",
    "\n",
    "# There are categorical columns identified as numerical. So, we can consider the column having numerical datatype but less \n",
    "# than 10 unique values as categorical columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "496603e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Data type correction\n",
    "\n",
    "#gb['make']=gb['make'].astype(object)\n",
    "#gb['population_density']=gb['population_density'].astype(object)\n",
    "#gb['airbags']=gb['airbags'].astype(object)\n",
    "#gb['displacement']=gb['displacement'].astype(object)\n",
    "#gb['cylinder']=gb['cylinder'].astype(object)\n",
    "#gb['gear_box']=gb['gear_box'].astype(object)\n",
    "#gb['ncap_rating']=gb['ncap_rating'].astype(object)\n",
    "#gb['turning_radius']=gb['turning_radius'].astype(object)\n",
    "#gb['length']=gb['length'].astype(object)\n",
    "#gb['width']=gb['width'].astype(object)\n",
    "#gb['height']=gb['height'].astype(object)\n",
    "#gb['gross_weight']=gb['gross_weight'].astype(object)\n",
    "#gb['is_claim'] = gb['is_claim'].astype(object)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "46a497e2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>policy_tenure</th>\n",
       "      <th>age_of_car</th>\n",
       "      <th>age_of_policyholder</th>\n",
       "      <th>population_density</th>\n",
       "      <th>make</th>\n",
       "      <th>airbags</th>\n",
       "      <th>displacement</th>\n",
       "      <th>cylinder</th>\n",
       "      <th>gear_box</th>\n",
       "      <th>length</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>gross_weight</th>\n",
       "      <th>ncap_rating</th>\n",
       "      <th>is_claim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>58592.000000</td>\n",
       "      <td>58592.000000</td>\n",
       "      <td>58556.000000</td>\n",
       "      <td>58592.000000</td>\n",
       "      <td>58592.000000</td>\n",
       "      <td>53680.000000</td>\n",
       "      <td>58592.000000</td>\n",
       "      <td>58592.000000</td>\n",
       "      <td>57347.000000</td>\n",
       "      <td>58592.000000</td>\n",
       "      <td>58592.000000</td>\n",
       "      <td>58592.00000</td>\n",
       "      <td>58592.000000</td>\n",
       "      <td>58592.000000</td>\n",
       "      <td>58592.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.611246</td>\n",
       "      <td>0.069424</td>\n",
       "      <td>0.469431</td>\n",
       "      <td>18826.858667</td>\n",
       "      <td>1.763722</td>\n",
       "      <td>3.241114</td>\n",
       "      <td>1162.355851</td>\n",
       "      <td>3.626963</td>\n",
       "      <td>5.250772</td>\n",
       "      <td>3850.476891</td>\n",
       "      <td>1672.233667</td>\n",
       "      <td>1553.33537</td>\n",
       "      <td>1385.276813</td>\n",
       "      <td>1.759950</td>\n",
       "      <td>0.063968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.414156</td>\n",
       "      <td>0.056721</td>\n",
       "      <td>0.122923</td>\n",
       "      <td>17660.174792</td>\n",
       "      <td>1.136988</td>\n",
       "      <td>1.880630</td>\n",
       "      <td>266.304786</td>\n",
       "      <td>0.483616</td>\n",
       "      <td>0.433461</td>\n",
       "      <td>311.457119</td>\n",
       "      <td>112.089135</td>\n",
       "      <td>79.62227</td>\n",
       "      <td>212.423085</td>\n",
       "      <td>1.389576</td>\n",
       "      <td>0.244698</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.002735</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.288462</td>\n",
       "      <td>290.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>796.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3445.000000</td>\n",
       "      <td>1475.000000</td>\n",
       "      <td>1475.00000</td>\n",
       "      <td>1051.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.210250</td>\n",
       "      <td>0.020000</td>\n",
       "      <td>0.365385</td>\n",
       "      <td>6112.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>796.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3445.000000</td>\n",
       "      <td>1515.000000</td>\n",
       "      <td>1475.00000</td>\n",
       "      <td>1185.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.573792</td>\n",
       "      <td>0.060000</td>\n",
       "      <td>0.451923</td>\n",
       "      <td>8794.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1197.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>3845.000000</td>\n",
       "      <td>1735.000000</td>\n",
       "      <td>1530.00000</td>\n",
       "      <td>1335.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.039104</td>\n",
       "      <td>0.110000</td>\n",
       "      <td>0.548077</td>\n",
       "      <td>27003.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1493.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>3995.000000</td>\n",
       "      <td>1755.000000</td>\n",
       "      <td>1635.00000</td>\n",
       "      <td>1510.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.396641</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>73430.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>1498.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>4300.000000</td>\n",
       "      <td>1811.000000</td>\n",
       "      <td>1825.00000</td>\n",
       "      <td>1720.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       policy_tenure    age_of_car  age_of_policyholder  population_density  \\\n",
       "count   58592.000000  58592.000000         58556.000000        58592.000000   \n",
       "mean        0.611246      0.069424             0.469431        18826.858667   \n",
       "std         0.414156      0.056721             0.122923        17660.174792   \n",
       "min         0.002735      0.000000             0.288462          290.000000   \n",
       "25%         0.210250      0.020000             0.365385         6112.000000   \n",
       "50%         0.573792      0.060000             0.451923         8794.000000   \n",
       "75%         1.039104      0.110000             0.548077        27003.000000   \n",
       "max         1.396641      1.000000             1.000000        73430.000000   \n",
       "\n",
       "               make       airbags  displacement      cylinder      gear_box  \\\n",
       "count  58592.000000  53680.000000  58592.000000  58592.000000  57347.000000   \n",
       "mean       1.763722      3.241114   1162.355851      3.626963      5.250772   \n",
       "std        1.136988      1.880630    266.304786      0.483616      0.433461   \n",
       "min        1.000000      1.000000    796.000000      3.000000      5.000000   \n",
       "25%        1.000000      2.000000    796.000000      3.000000      5.000000   \n",
       "50%        1.000000      2.000000   1197.000000      4.000000      5.000000   \n",
       "75%        3.000000      6.000000   1493.000000      4.000000      6.000000   \n",
       "max        5.000000      6.000000   1498.000000      4.000000      6.000000   \n",
       "\n",
       "             length         width       height  gross_weight   ncap_rating  \\\n",
       "count  58592.000000  58592.000000  58592.00000  58592.000000  58592.000000   \n",
       "mean    3850.476891   1672.233667   1553.33537   1385.276813      1.759950   \n",
       "std      311.457119    112.089135     79.62227    212.423085      1.389576   \n",
       "min     3445.000000   1475.000000   1475.00000   1051.000000      0.000000   \n",
       "25%     3445.000000   1515.000000   1475.00000   1185.000000      0.000000   \n",
       "50%     3845.000000   1735.000000   1530.00000   1335.000000      2.000000   \n",
       "75%     3995.000000   1755.000000   1635.00000   1510.000000      3.000000   \n",
       "max     4300.000000   1811.000000   1825.00000   1720.000000      5.000000   \n",
       "\n",
       "           is_claim  \n",
       "count  58592.000000  \n",
       "mean       0.063968  \n",
       "std        0.244698  \n",
       "min        0.000000  \n",
       "25%        0.000000  \n",
       "50%        0.000000  \n",
       "75%        0.000000  \n",
       "max        1.000000  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Statistical summary of numerical columns\n",
    "gb.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c7607ee8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>policy_id</th>\n",
       "      <th>area_cluster</th>\n",
       "      <th>segment</th>\n",
       "      <th>model</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>max_torque</th>\n",
       "      <th>max_power</th>\n",
       "      <th>engine_type</th>\n",
       "      <th>is_esc</th>\n",
       "      <th>is_adjustable_steering</th>\n",
       "      <th>...</th>\n",
       "      <th>is_rear_window_washer</th>\n",
       "      <th>is_rear_window_defogger</th>\n",
       "      <th>is_brake_assist</th>\n",
       "      <th>is_power_door_locks</th>\n",
       "      <th>is_central_locking</th>\n",
       "      <th>is_power_steering</th>\n",
       "      <th>is_driver_seat_height_adjustable</th>\n",
       "      <th>is_day_night_rear_view_mirror</th>\n",
       "      <th>is_ecw</th>\n",
       "      <th>is_speed_alert</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>58592</td>\n",
       "      <td>58091</td>\n",
       "      <td>58592</td>\n",
       "      <td>58592</td>\n",
       "      <td>58592</td>\n",
       "      <td>58592</td>\n",
       "      <td>58592</td>\n",
       "      <td>58070</td>\n",
       "      <td>57392</td>\n",
       "      <td>58592</td>\n",
       "      <td>...</td>\n",
       "      <td>58592</td>\n",
       "      <td>58592</td>\n",
       "      <td>58592</td>\n",
       "      <td>58592</td>\n",
       "      <td>58592</td>\n",
       "      <td>58483</td>\n",
       "      <td>58592</td>\n",
       "      <td>58592</td>\n",
       "      <td>58592</td>\n",
       "      <td>58484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>58592</td>\n",
       "      <td>22</td>\n",
       "      <td>6</td>\n",
       "      <td>11</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>ID00001</td>\n",
       "      <td>C8</td>\n",
       "      <td>B2</td>\n",
       "      <td>M1</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>113Nm@4400rpm</td>\n",
       "      <td>88.50bhp@6000rpm</td>\n",
       "      <td>F8D Petrol Engine</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>1</td>\n",
       "      <td>13153</td>\n",
       "      <td>18314</td>\n",
       "      <td>14948</td>\n",
       "      <td>20182</td>\n",
       "      <td>17796</td>\n",
       "      <td>17796</td>\n",
       "      <td>14948</td>\n",
       "      <td>40191</td>\n",
       "      <td>35526</td>\n",
       "      <td>...</td>\n",
       "      <td>41634</td>\n",
       "      <td>38077</td>\n",
       "      <td>32177</td>\n",
       "      <td>42435</td>\n",
       "      <td>42435</td>\n",
       "      <td>57274</td>\n",
       "      <td>34291</td>\n",
       "      <td>36309</td>\n",
       "      <td>42435</td>\n",
       "      <td>58121</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows Ã— 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       policy_id area_cluster segment  model fuel_type     max_torque  \\\n",
       "count      58592        58091   58592  58592     58592          58592   \n",
       "unique     58592           22       6     11         6              9   \n",
       "top      ID00001           C8      B2     M1    Petrol  113Nm@4400rpm   \n",
       "freq           1        13153   18314  14948     20182          17796   \n",
       "\n",
       "               max_power        engine_type is_esc is_adjustable_steering  \\\n",
       "count              58592              58070  57392                  58592   \n",
       "unique                 9                 11      2                      2   \n",
       "top     88.50bhp@6000rpm  F8D Petrol Engine     No                    Yes   \n",
       "freq               17796              14948  40191                  35526   \n",
       "\n",
       "        ... is_rear_window_washer is_rear_window_defogger is_brake_assist  \\\n",
       "count   ...                 58592                   58592           58592   \n",
       "unique  ...                     2                       2               2   \n",
       "top     ...                    No                      No             Yes   \n",
       "freq    ...                 41634                   38077           32177   \n",
       "\n",
       "       is_power_door_locks is_central_locking is_power_steering  \\\n",
       "count                58592              58592             58483   \n",
       "unique                   2                  2                 2   \n",
       "top                    Yes                Yes               Yes   \n",
       "freq                 42435              42435             57274   \n",
       "\n",
       "       is_driver_seat_height_adjustable is_day_night_rear_view_mirror is_ecw  \\\n",
       "count                             58592                         58592  58592   \n",
       "unique                                2                             2      2   \n",
       "top                                 Yes                            No    Yes   \n",
       "freq                              34291                         36309  42435   \n",
       "\n",
       "       is_speed_alert  \n",
       "count           58484  \n",
       "unique              2  \n",
       "top               Yes  \n",
       "freq            58121  \n",
       "\n",
       "[4 rows x 29 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Statistical summary of categorical columns\n",
    "gb.describe(include='object')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "761b6bb2",
   "metadata": {},
   "source": [
    "### Data Pre-Processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8b486d84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>policy_id</th>\n",
       "      <th>policy_tenure</th>\n",
       "      <th>age_of_car</th>\n",
       "      <th>age_of_policyholder</th>\n",
       "      <th>area_cluster</th>\n",
       "      <th>population_density</th>\n",
       "      <th>make</th>\n",
       "      <th>segment</th>\n",
       "      <th>model</th>\n",
       "      <th>fuel_type</th>\n",
       "      <th>...</th>\n",
       "      <th>is_brake_assist</th>\n",
       "      <th>is_power_door_locks</th>\n",
       "      <th>is_central_locking</th>\n",
       "      <th>is_power_steering</th>\n",
       "      <th>is_driver_seat_height_adjustable</th>\n",
       "      <th>is_day_night_rear_view_mirror</th>\n",
       "      <th>is_ecw</th>\n",
       "      <th>is_speed_alert</th>\n",
       "      <th>ncap_rating</th>\n",
       "      <th>is_claim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows Ã— 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [policy_id, policy_tenure, age_of_car, age_of_policyholder, area_cluster, population_density, make, segment, model, fuel_type, max_torque, max_power, engine_type, airbags, is_esc, is_adjustable_steering, is_tpms, is_parking_sensors, is_parking_camera, rear_brakes_type, displacement, cylinder, transmission_type, gear_box, steering_type, turning_radius, length, width, height, gross_weight, is_front_fog_lights, is_rear_window_wiper, is_rear_window_washer, is_rear_window_defogger, is_brake_assist, is_power_door_locks, is_central_locking, is_power_steering, is_driver_seat_height_adjustable, is_day_night_rear_view_mirror, is_ecw, is_speed_alert, ncap_rating, is_claim]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 44 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking duplicate values\n",
    "gb[gb.duplicated()]\n",
    "\n",
    "# no duplicate rows"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34de0a14",
   "metadata": {},
   "source": [
    "#### 1. IDENTIFYING AND HANDLING ANOMALIES PRESENT IN DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "de58213b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Petrol    20182\n",
       "CNG       19502\n",
       "Diesel    17440\n",
       "cng         828\n",
       "petrol      350\n",
       "diesel      290\n",
       "Name: fuel_type, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 1.Anomaly in Fuel_Type\n",
    "\n",
    "gb['fuel_type'].value_counts() \n",
    "\n",
    "# fuel_type 'Petrol','Diesel', 'CNG'and 'petrol','diesel','cng' are same which is identified as two different types due to\n",
    "# case sensitivity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "0969e775",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PETROL    20532\n",
       "CNG       20330\n",
       "DIESEL    17730\n",
       "Name: fuel_type, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# correcting the defect\n",
    "gb['fuel_type']=gb['fuel_type'].transform(lambda x:x.upper())\n",
    "gb['fuel_type'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "62d0a474",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.6     14619\n",
       "4.8     13739\n",
       "5.2     12947\n",
       "4.7      3843\n",
       "5        3694\n",
       "4.85     2689\n",
       "4.9      1936\n",
       "4,8      1117\n",
       "4.5      1117\n",
       "5,2      1071\n",
       "5.1       348\n",
       "4,7       330\n",
       "4,6       329\n",
       "5,0       277\n",
       "4,85      251\n",
       "4,9       178\n",
       "4,5        92\n",
       "5,1        15\n",
       "Name: turning_radius, dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 2.Anomaly in Turning_Radius\n",
    "\n",
    "gb['turning_radius'].value_counts()   \n",
    "\n",
    "# some of the entries in 'turning_radius' are incorrect as they have ',' instead of '.'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "97802643",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.6     14948\n",
       "4.8     14856\n",
       "5.2     14018\n",
       "4.7      4173\n",
       "5        3694\n",
       "4.85     2940\n",
       "4.9      2114\n",
       "4.5      1209\n",
       "5.1       363\n",
       "5.0       277\n",
       "Name: turning_radius, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# correcting the defect\n",
    "gb['turning_radius'] = gb['turning_radius'].str.replace(',','.')\n",
    "gb['turning_radius'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60cd7c1e",
   "metadata": {},
   "source": [
    "#### 2. CHECKING THE PRESENCE OF MISSING/NULL VALUES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4d8bb46e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(gb.isnull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "968c0d11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "policy_id                              0\n",
       "policy_tenure                          0\n",
       "age_of_car                             0\n",
       "age_of_policyholder                   36\n",
       "area_cluster                         501\n",
       "population_density                     0\n",
       "make                                   0\n",
       "segment                                0\n",
       "model                                  0\n",
       "fuel_type                              0\n",
       "max_torque                             0\n",
       "max_power                              0\n",
       "engine_type                          522\n",
       "airbags                             4912\n",
       "is_esc                              1200\n",
       "is_adjustable_steering                 0\n",
       "is_tpms                                0\n",
       "is_parking_sensors                  2114\n",
       "is_parking_camera                      0\n",
       "rear_brakes_type                       0\n",
       "displacement                           0\n",
       "cylinder                               0\n",
       "transmission_type                      0\n",
       "gear_box                            1245\n",
       "steering_type                          0\n",
       "turning_radius                         0\n",
       "length                                 0\n",
       "width                                  0\n",
       "height                                 0\n",
       "gross_weight                           0\n",
       "is_front_fog_lights                    0\n",
       "is_rear_window_wiper                   0\n",
       "is_rear_window_washer                  0\n",
       "is_rear_window_defogger                0\n",
       "is_brake_assist                        0\n",
       "is_power_door_locks                    0\n",
       "is_central_locking                     0\n",
       "is_power_steering                    109\n",
       "is_driver_seat_height_adjustable       0\n",
       "is_day_night_rear_view_mirror          0\n",
       "is_ecw                                 0\n",
       "is_speed_alert                       108\n",
       "ncap_rating                            0\n",
       "is_claim                               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Count of missing/null values\n",
    "\n",
    "gb.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "0ef68be3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "policy_id                           0.000000\n",
       "policy_tenure                       0.000000\n",
       "age_of_car                          0.000000\n",
       "age_of_policyholder                 0.000614\n",
       "area_cluster                        0.008551\n",
       "population_density                  0.000000\n",
       "make                                0.000000\n",
       "segment                             0.000000\n",
       "model                               0.000000\n",
       "fuel_type                           0.000000\n",
       "max_torque                          0.000000\n",
       "max_power                           0.000000\n",
       "engine_type                         0.008909\n",
       "airbags                             0.083834\n",
       "is_esc                              0.020481\n",
       "is_adjustable_steering              0.000000\n",
       "is_tpms                             0.000000\n",
       "is_parking_sensors                  0.036080\n",
       "is_parking_camera                   0.000000\n",
       "rear_brakes_type                    0.000000\n",
       "displacement                        0.000000\n",
       "cylinder                            0.000000\n",
       "transmission_type                   0.000000\n",
       "gear_box                            0.021249\n",
       "steering_type                       0.000000\n",
       "turning_radius                      0.000000\n",
       "length                              0.000000\n",
       "width                               0.000000\n",
       "height                              0.000000\n",
       "gross_weight                        0.000000\n",
       "is_front_fog_lights                 0.000000\n",
       "is_rear_window_wiper                0.000000\n",
       "is_rear_window_washer               0.000000\n",
       "is_rear_window_defogger             0.000000\n",
       "is_brake_assist                     0.000000\n",
       "is_power_door_locks                 0.000000\n",
       "is_central_locking                  0.000000\n",
       "is_power_steering                   0.001860\n",
       "is_driver_seat_height_adjustable    0.000000\n",
       "is_day_night_rear_view_mirror       0.000000\n",
       "is_ecw                              0.000000\n",
       "is_speed_alert                      0.001843\n",
       "ncap_rating                         0.000000\n",
       "is_claim                            0.000000\n",
       "dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Percentage of missing values\n",
    "\n",
    "gb.isnull().sum()/len(gb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "68ecef12",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Treating null values \n",
    "\n",
    "# Imputing null values of columns with median, mode. Also applying logical imputation wherever possible\n",
    "\n",
    "gb.age_of_policyholder=gb.age_of_policyholder.fillna(gb.age_of_policyholder.median())\n",
    "gb['area_cluster']=gb['area_cluster'].fillna(gb['area_cluster'].mode()[0])\n",
    "gb['make']=gb['make'].fillna(gb['make'].mode()[0])\n",
    "gb['engine_type']=gb.groupby('make')['engine_type'].transform(lambda x:x.fillna(x.mode()[0]))\n",
    "gb['airbags']=gb.groupby('model')['airbags'].transform(lambda x:x.fillna(x.mode()[0]))\n",
    "gb['is_esc']=gb.groupby('model')['is_esc'].transform(lambda x:x.fillna(x.mode()[0]))\n",
    "gb['is_parking_sensors']=gb['is_parking_sensors'].transform(lambda x:x.fillna(x.mode()[0]))\n",
    "gb['gear_box']=gb.groupby('model')['gear_box'].transform(lambda x:x.fillna(x.mode()[0]))\n",
    "gb['is_power_steering']=gb.groupby('model')['is_power_steering'].transform(lambda x:x.fillna(x.mode()[0]))\n",
    "gb['is_speed_alert']=gb.groupby('model')['is_speed_alert'].transform(lambda x:x.fillna(x.mode()[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "342d1385",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "policy_id                           0\n",
       "policy_tenure                       0\n",
       "age_of_car                          0\n",
       "age_of_policyholder                 0\n",
       "area_cluster                        0\n",
       "population_density                  0\n",
       "make                                0\n",
       "segment                             0\n",
       "model                               0\n",
       "fuel_type                           0\n",
       "max_torque                          0\n",
       "max_power                           0\n",
       "engine_type                         0\n",
       "airbags                             0\n",
       "is_esc                              0\n",
       "is_adjustable_steering              0\n",
       "is_tpms                             0\n",
       "is_parking_sensors                  0\n",
       "is_parking_camera                   0\n",
       "rear_brakes_type                    0\n",
       "displacement                        0\n",
       "cylinder                            0\n",
       "transmission_type                   0\n",
       "gear_box                            0\n",
       "steering_type                       0\n",
       "turning_radius                      0\n",
       "length                              0\n",
       "width                               0\n",
       "height                              0\n",
       "gross_weight                        0\n",
       "is_front_fog_lights                 0\n",
       "is_rear_window_wiper                0\n",
       "is_rear_window_washer               0\n",
       "is_rear_window_defogger             0\n",
       "is_brake_assist                     0\n",
       "is_power_door_locks                 0\n",
       "is_central_locking                  0\n",
       "is_power_steering                   0\n",
       "is_driver_seat_height_adjustable    0\n",
       "is_day_night_rear_view_mirror       0\n",
       "is_ecw                              0\n",
       "is_speed_alert                      0\n",
       "ncap_rating                         0\n",
       "is_claim                            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gb.isnull().sum()   # Null values are treated"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5abe475c",
   "metadata": {},
   "source": [
    "#### 3. Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "90fc7d6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature Engineering: creating new columns\n",
    "# New columns can provide better information and creating them from existing columns can help us to drop redundant cols.\n",
    "\n",
    "\n",
    "gb['maximum_power_Kw']=gb['max_power'].transform(lambda x:float(x.replace('rpm','').split('bhp@')[0])*0.746) #1\n",
    "\n",
    "gb['maximum_torque']=gb['max_torque'].transform(lambda x:float(x.replace('rpm','').split('Nm@')[0])) #2\n",
    "\n",
    "gb['torque_power_ratio_Nm/Kw']=gb['maximum_torque']/gb['maximum_power_Kw'] #3\n",
    "\n",
    "gb['peak_power_rpm']=(gb['maximum_power_Kw']/gb['maximum_torque'])*9549    # 4\n",
    "\n",
    "gb['aspect_ratio']=(gb['length']/gb['height'])        #5\n",
    "\n",
    "gb['footprint']=(gb['length']*gb['width'])              #6\n",
    "\n",
    "gb['volume_M3']=round(gb['length']*gb['width']*gb['height']/1000000000,2)  #7\n",
    "\n",
    "gb['safety_index']=round(gb['ncap_rating']*gb['airbags']*gb['volume_M3'],2)   #8\n",
    "\n",
    "# 'safety_index' is a comprehensive safety feature of car combining various columns. so now we can drop ncap, airbags"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b42a3e9",
   "metadata": {},
   "source": [
    " REDUNDANT COLUMNS:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c9790836",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    ID00001\n",
       "1    ID00002\n",
       "2    ID00003\n",
       "Name: policy_id, dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gb['policy_id'].head(3)\n",
    "# This is a redundant column as it is a unique identifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "eb0445a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "area_cluster  population_density\n",
       "C1            4990                   1468\n",
       "C10           73430                  3155\n",
       "C11           6108                   1212\n",
       "C12           34791                  1589\n",
       "C13           5410                   3423\n",
       "C14           7788                   3660\n",
       "C15           290                     771\n",
       "C16           16206                   401\n",
       "C17           65567                   492\n",
       "C18           35036                   242\n",
       "C19           27742                   952\n",
       "C2            27003                  7342\n",
       "C20           20905                   109\n",
       "C21           3264                    379\n",
       "C22           16733                   207\n",
       "C3            4076                   6101\n",
       "C4            21622                   665\n",
       "C5            34738                  6979\n",
       "C6            13051                   890\n",
       "C7            6112                   2167\n",
       "C8            8794                  13654\n",
       "C9            17804                  2734\n",
       "Name: population_density, dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gb.groupby('area_cluster')['population_density'].value_counts()  \n",
    "# area_cluster and population_density provide same information. so, 1 of them can be dropped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3aa7b8e2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model     M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "make                                                                        \n",
      "1      14948  1209    0  1080     0      0     0  13776  2940  4173     0   \n",
      "2          0     0    0     0  2373      0     0      0     0     0     0   \n",
      "3          0     0    0     0     0  14018     0      0     0     0     0   \n",
      "4          0     0  363     0     0      0  1598      0     0     0     0   \n",
      "5          0     0    0     0     0      0     0      0     0     0  2114   \n",
      "All    14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model    All  \n",
      "make          \n",
      "1      38126  \n",
      "2       2373  \n",
      "3      14018  \n",
      "4       1961  \n",
      "5       2114  \n",
      "All    58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model       M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "segment                                                                       \n",
      "A        14948     0    0     0  2373      0     0      0     0     0     0   \n",
      "B1           0     0    0     0     0      0     0      0     0  4173     0   \n",
      "B2           0     0    0     0     0      0  1598  13776  2940     0     0   \n",
      "C1           0     0  363  1080     0      0     0      0     0     0  2114   \n",
      "C2           0     0    0     0     0  14018     0      0     0     0     0   \n",
      "Utility      0  1209    0     0     0      0     0      0     0     0     0   \n",
      "All      14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model      All  \n",
      "segment         \n",
      "A        17321  \n",
      "B1        4173  \n",
      "B2       18314  \n",
      "C1        3557  \n",
      "C2       14018  \n",
      "Utility   1209  \n",
      "All      58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model     M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "model                                                                       \n",
      "M1     14948     0    0     0     0      0     0      0     0     0     0   \n",
      "M10        0  1209    0     0     0      0     0      0     0     0     0   \n",
      "M11        0     0  363     0     0      0     0      0     0     0     0   \n",
      "M2         0     0    0  1080     0      0     0      0     0     0     0   \n",
      "M3         0     0    0     0  2373      0     0      0     0     0     0   \n",
      "M4         0     0    0     0     0  14018     0      0     0     0     0   \n",
      "M5         0     0    0     0     0      0  1598      0     0     0     0   \n",
      "M6         0     0    0     0     0      0     0  13776     0     0     0   \n",
      "M7         0     0    0     0     0      0     0      0  2940     0     0   \n",
      "M8         0     0    0     0     0      0     0      0     0  4173     0   \n",
      "M9         0     0    0     0     0      0     0      0     0     0  2114   \n",
      "All    14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model    All  \n",
      "model         \n",
      "M1     14948  \n",
      "M10     1209  \n",
      "M11      363  \n",
      "M2      1080  \n",
      "M3      2373  \n",
      "M4     14018  \n",
      "M5      1598  \n",
      "M6     13776  \n",
      "M7      2940  \n",
      "M8      4173  \n",
      "M9      2114  \n",
      "All    58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model         M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "fuel_type                                                                       \n",
      "CNG        14948  1209    0     0     0      0     0      0     0  4173     0   \n",
      "DIESEL         0     0    0     0     0  14018  1598      0     0     0  2114   \n",
      "PETROL         0     0  363  1080  2373      0     0  13776  2940     0     0   \n",
      "All        14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model        All  \n",
      "fuel_type         \n",
      "CNG        20330  \n",
      "DIESEL     17730  \n",
      "PETROL     20532  \n",
      "All        58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model              M1   M10  M11    M2    M3     M4    M5     M6    M7    M8  \\\n",
      "max_torque                                                                     \n",
      "113Nm@4400rpm       0     0    0  1080     0      0     0  13776  2940     0   \n",
      "170Nm@4000rpm       0     0  363     0     0      0     0      0     0     0   \n",
      "200Nm@1750rpm       0     0    0     0     0      0     0      0     0     0   \n",
      "200Nm@3000rpm       0     0    0     0     0      0  1598      0     0     0   \n",
      "250Nm@2750rpm       0     0    0     0     0  14018     0      0     0     0   \n",
      "60Nm@3500rpm    14948     0    0     0     0      0     0      0     0     0   \n",
      "82.1Nm@3400rpm      0     0    0     0     0      0     0      0     0  4173   \n",
      "85Nm@3000rpm        0  1209    0     0     0      0     0      0     0     0   \n",
      "91Nm@4250rpm        0     0    0     0  2373      0     0      0     0     0   \n",
      "All             14948  1209  363  1080  2373  14018  1598  13776  2940  4173   \n",
      "\n",
      "model             M9    All  \n",
      "max_torque                   \n",
      "113Nm@4400rpm      0  17796  \n",
      "170Nm@4000rpm      0    363  \n",
      "200Nm@1750rpm   2114   2114  \n",
      "200Nm@3000rpm      0   1598  \n",
      "250Nm@2750rpm      0  14018  \n",
      "60Nm@3500rpm       0  14948  \n",
      "82.1Nm@3400rpm     0   4173  \n",
      "85Nm@3000rpm       0   1209  \n",
      "91Nm@4250rpm       0   2373  \n",
      "All             2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                 M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "max_power                                                                   \n",
      "113.45bhp@4000rpm      0     0    0     0     0  14018     0      0     0   \n",
      "118.36bhp@5500rpm      0     0  363     0     0      0     0      0     0   \n",
      "40.36bhp@6000rpm   14948     0    0     0     0      0     0      0     0   \n",
      "55.92bhp@5300rpm       0     0    0     0     0      0     0      0     0   \n",
      "61.68bhp@6000rpm       0  1209    0     0     0      0     0      0     0   \n",
      "67.06bhp@5500rpm       0     0    0     0  2373      0     0      0     0   \n",
      "88.50bhp@6000rpm       0     0    0  1080     0      0     0  13776  2940   \n",
      "88.77bhp@4000rpm       0     0    0     0     0      0  1598      0     0   \n",
      "97.89bhp@3600rpm       0     0    0     0     0      0     0      0     0   \n",
      "All                14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                M8    M9    All  \n",
      "max_power                             \n",
      "113.45bhp@4000rpm     0     0  14018  \n",
      "118.36bhp@5500rpm     0     0    363  \n",
      "40.36bhp@6000rpm      0     0  14948  \n",
      "55.92bhp@5300rpm   4173     0   4173  \n",
      "61.68bhp@6000rpm      0     0   1209  \n",
      "67.06bhp@5500rpm      0     0   2373  \n",
      "88.50bhp@6000rpm      0     0  17796  \n",
      "88.77bhp@4000rpm      0     0   1598  \n",
      "97.89bhp@3600rpm      0  2114   2114  \n",
      "All                4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                         M1   M10  M11    M2    M3     M4    M5     M6  \\\n",
      "engine_type                                                                   \n",
      "1.0 SCe                        0     0    0     0  2373      0     0      0   \n",
      "1.2 L K Series Engine          0     0    0     0     0      0     0      0   \n",
      "1.2 L K12N Dualjet             0     0    0  1080     0      0     0      0   \n",
      "1.5 L U2 CRDi                  0     0    0     0     0  14018     0      0   \n",
      "1.5 Turbocharged Revotorq      0     0    0     0     0      0  1598      0   \n",
      "1.5 Turbocharged Revotron      0     0  363     0     0      0     0      0   \n",
      "F8D Petrol Engine          14948     0    0     0     0      0     0      0   \n",
      "G12B                           0  1209    0     0     0      0     0      0   \n",
      "K Series Dual jet              0     0    0     0     0      0     0  13776   \n",
      "K10C                           0     0    0     0     0      0     0      0   \n",
      "i-DTEC                         0     0    0     0     0      0     0      0   \n",
      "All                        14948  1209  363  1080  2373  14018  1598  13776   \n",
      "\n",
      "model                        M7    M8    M9    All  \n",
      "engine_type                                         \n",
      "1.0 SCe                       0     0     0   2373  \n",
      "1.2 L K Series Engine      2940     0     0   2940  \n",
      "1.2 L K12N Dualjet            0     0     0   1080  \n",
      "1.5 L U2 CRDi                 0     0     0  14018  \n",
      "1.5 Turbocharged Revotorq     0     0     0   1598  \n",
      "1.5 Turbocharged Revotron     0     0     0    363  \n",
      "F8D Petrol Engine             0     0     0  14948  \n",
      "G12B                          0     0     0   1209  \n",
      "K Series Dual jet             0     0     0  13776  \n",
      "K10C                          0  4173     0   4173  \n",
      "i-DTEC                        0     0  2114   2114  \n",
      "All                        2940  4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model       M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "airbags                                                                       \n",
      "1.0          0  1209    0     0     0      0     0      0     0     0     0   \n",
      "2.0      14948     0  363  1080  2373      0  1598  13776     0  4173  2114   \n",
      "6.0          0     0    0     0     0  14018     0      0  2940     0     0   \n",
      "All      14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model      All  \n",
      "airbags         \n",
      "1.0       1209  \n",
      "2.0      40425  \n",
      "6.0      16958  \n",
      "All      58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model      M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "is_esc                                                                       \n",
      "No      14948  1209    0     0  2373      0  1598  13776     0  4173  2114   \n",
      "Yes         0     0  363  1080     0  14018     0      0  2940     0     0   \n",
      "All     14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model     All  \n",
      "is_esc         \n",
      "No      40191  \n",
      "Yes     18401  \n",
      "All     58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                      M1   M10  M11    M2    M3     M4    M5     M6  \\\n",
      "is_adjustable_steering                                                     \n",
      "No                      14948  1209  363     0  2373      0     0      0   \n",
      "Yes                         0     0    0  1080     0  14018  1598  13776   \n",
      "All                     14948  1209  363  1080  2373  14018  1598  13776   \n",
      "\n",
      "model                     M7    M8    M9    All  \n",
      "is_adjustable_steering                           \n",
      "No                         0  4173     0  23066  \n",
      "Yes                     2940     0  2114  35526  \n",
      "All                     2940  4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model       M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "is_tpms                                                                       \n",
      "No       14948  1209  363  1080  2373      0  1598  13776  2940  4173  2114   \n",
      "Yes          0     0    0     0     0  14018     0      0     0     0     0   \n",
      "All      14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model      All  \n",
      "is_tpms         \n",
      "No       44574  \n",
      "Yes      14018  \n",
      "All      58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                  M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "is_parking_sensors                                                           \n",
      "No                      0     0    0     0  2373      0     0      0     0   \n",
      "Yes                 14948  1209  363  1080     0  14018  1598  13776  2940   \n",
      "All                 14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                 M8    M9    All  \n",
      "is_parking_sensors                     \n",
      "No                     0     0   2373  \n",
      "Yes                 4173  2114  56219  \n",
      "All                 4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                 M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "is_parking_camera                                                           \n",
      "No                 14948  1209    0     0     0      0  1598  13776     0   \n",
      "Yes                    0     0  363  1080  2373  14018     0      0  2940   \n",
      "All                14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                M8    M9    All  \n",
      "is_parking_camera                     \n",
      "No                 4173     0  35704  \n",
      "Yes                   0  2114  22888  \n",
      "All                4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "rear_brakes_type                                                           \n",
      "Disc                  0     0    0     0     0  14018     0      0     0   \n",
      "Drum              14948  1209  363  1080  2373      0  1598  13776  2940   \n",
      "All               14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model               M8    M9    All  \n",
      "rear_brakes_type                     \n",
      "Disc                 0     0  14018  \n",
      "Drum              4173  2114  44574  \n",
      "All               4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model            M1   M10  M11    M2    M3     M4    M5     M6    M7    M8  \\\n",
      "displacement                                                                 \n",
      "796           14948     0    0     0     0      0     0      0     0     0   \n",
      "998               0     0    0     0     0      0     0      0     0  4173   \n",
      "999               0     0    0     0  2373      0     0      0     0     0   \n",
      "1196              0  1209    0     0     0      0     0      0     0     0   \n",
      "1197              0     0    0  1080     0      0     0  13776  2940     0   \n",
      "1199              0     0  363     0     0      0     0      0     0     0   \n",
      "1493              0     0    0     0     0  14018     0      0     0     0   \n",
      "1497              0     0    0     0     0      0  1598      0     0     0   \n",
      "1498              0     0    0     0     0      0     0      0     0     0   \n",
      "All           14948  1209  363  1080  2373  14018  1598  13776  2940  4173   \n",
      "\n",
      "model           M9    All  \n",
      "displacement               \n",
      "796              0  14948  \n",
      "998              0   4173  \n",
      "999              0   2373  \n",
      "1196             0   1209  \n",
      "1197             0  17796  \n",
      "1199             0    363  \n",
      "1493             0  14018  \n",
      "1497             0   1598  \n",
      "1498          2114   2114  \n",
      "All           2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model        M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "cylinder                                                                       \n",
      "3         14948     0  363     0  2373      0     0      0     0  4173     0   \n",
      "4             0  1209    0  1080     0  14018  1598  13776  2940     0  2114   \n",
      "All       14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model       All  \n",
      "cylinder         \n",
      "3         21857  \n",
      "4         36735  \n",
      "All       58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                 M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "transmission_type                                                           \n",
      "Automatic              0     0    0  1080  2373  14018     0      0  2940   \n",
      "Manual             14948  1209  363     0     0      0  1598  13776     0   \n",
      "All                14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                M8    M9    All  \n",
      "transmission_type                     \n",
      "Automatic             0     0  20411  \n",
      "Manual             4173  2114  38181  \n",
      "All                4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model        M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "gear_box                                                                       \n",
      "5.0       14948  1209    0  1080  2373      0  1598  13776  2940  4173  2114   \n",
      "6.0           0     0  363     0     0  14018     0      0     0     0     0   \n",
      "All       14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model       All  \n",
      "gear_box         \n",
      "5.0       44211  \n",
      "6.0       14381  \n",
      "All       58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model             M1   M10  M11    M2    M3     M4    M5     M6    M7    M8  \\\n",
      "steering_type                                                                 \n",
      "Electric           0     0    0  1080  2373      0  1598  13776  2940     0   \n",
      "Manual             0  1209    0     0     0      0     0      0     0     0   \n",
      "Power          14948     0  363     0     0  14018     0      0     0  4173   \n",
      "All            14948  1209  363  1080  2373  14018  1598  13776  2940  4173   \n",
      "\n",
      "model            M9    All  \n",
      "steering_type               \n",
      "Electric       2114  23881  \n",
      "Manual            0   1209  \n",
      "Power             0  33502  \n",
      "All            2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model              M1   M10  M11    M2    M3     M4    M5     M6    M7    M8  \\\n",
      "turning_radius                                                                 \n",
      "4.5                 0  1209    0     0     0      0     0      0     0     0   \n",
      "4.6             14948     0    0     0     0      0     0      0     0     0   \n",
      "4.7                 0     0    0     0     0      0     0      0     0  4173   \n",
      "4.8                 0     0    0  1080     0      0     0  13776     0     0   \n",
      "4.85                0     0    0     0     0      0     0      0  2940     0   \n",
      "4.9                 0     0    0     0     0      0     0      0     0     0   \n",
      "5                   0     0    0     0  2225      0  1469      0     0     0   \n",
      "5.0                 0     0    0     0   148      0   129      0     0     0   \n",
      "5.1                 0     0  363     0     0      0     0      0     0     0   \n",
      "5.2                 0     0    0     0     0  14018     0      0     0     0   \n",
      "All             14948  1209  363  1080  2373  14018  1598  13776  2940  4173   \n",
      "\n",
      "model             M9    All  \n",
      "turning_radius               \n",
      "4.5                0   1209  \n",
      "4.6                0  14948  \n",
      "4.7                0   4173  \n",
      "4.8                0  14856  \n",
      "4.85               0   2940  \n",
      "4.9             2114   2114  \n",
      "5                  0   3694  \n",
      "5.0                0    277  \n",
      "5.1                0    363  \n",
      "5.2                0  14018  \n",
      "All             2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model      M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "length                                                                       \n",
      "3445    14948     0    0     0     0      0     0      0     0     0     0   \n",
      "3655        0     0    0     0     0      0     0      0     0  4173     0   \n",
      "3675        0  1209    0     0     0      0     0      0     0     0     0   \n",
      "3731        0     0    0     0  2373      0     0      0     0     0     0   \n",
      "3845        0     0    0     0     0      0     0  13776     0     0     0   \n",
      "3990        0     0    0     0     0      0  1598      0  2940     0     0   \n",
      "3993        0     0  363     0     0      0     0      0     0     0     0   \n",
      "3995        0     0    0  1080     0      0     0      0     0     0  2114   \n",
      "4300        0     0    0     0     0  14018     0      0     0     0     0   \n",
      "All     14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model     All  \n",
      "length         \n",
      "3445    14948  \n",
      "3655     4173  \n",
      "3675     1209  \n",
      "3731     2373  \n",
      "3845    13776  \n",
      "3990     4538  \n",
      "3993      363  \n",
      "3995     3194  \n",
      "4300    14018  \n",
      "All     58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model     M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "width                                                                       \n",
      "1475       0  1209    0     0     0      0     0      0     0     0     0   \n",
      "1515   14948     0    0     0     0      0     0      0     0     0     0   \n",
      "1579       0     0    0     0  2373      0     0      0     0     0     0   \n",
      "1620       0     0    0     0     0      0     0      0     0  4173     0   \n",
      "1695       0     0    0     0     0      0     0      0     0     0  2114   \n",
      "1735       0     0    0  1080     0      0     0  13776     0     0     0   \n",
      "1745       0     0    0     0     0      0     0      0  2940     0     0   \n",
      "1755       0     0    0     0     0      0  1598      0     0     0     0   \n",
      "1790       0     0    0     0     0  14018     0      0     0     0     0   \n",
      "1811       0     0  363     0     0      0     0      0     0     0     0   \n",
      "All    14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model    All  \n",
      "width         \n",
      "1475    1209  \n",
      "1515   14948  \n",
      "1579    2373  \n",
      "1620    4173  \n",
      "1695    2114  \n",
      "1735   14856  \n",
      "1745    2940  \n",
      "1755    1598  \n",
      "1790   14018  \n",
      "1811     363  \n",
      "All    58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model      M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "height                                                                       \n",
      "1475    14948     0    0     0     0      0     0      0     0     0     0   \n",
      "1490        0     0    0     0  2373      0     0      0     0     0     0   \n",
      "1500        0     0    0     0     0      0     0      0  2940     0     0   \n",
      "1501        0     0    0     0     0      0     0      0     0     0  2114   \n",
      "1515        0     0    0  1080     0      0     0      0     0     0     0   \n",
      "1523        0     0    0     0     0      0  1598      0     0     0     0   \n",
      "1530        0     0    0     0     0      0     0  13776     0     0     0   \n",
      "1606        0     0  363     0     0      0     0      0     0     0     0   \n",
      "1635        0     0    0     0     0  14018     0      0     0     0     0   \n",
      "1675        0     0    0     0     0      0     0      0     0  4173     0   \n",
      "1825        0  1209    0     0     0      0     0      0     0     0     0   \n",
      "All     14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model     All  \n",
      "height         \n",
      "1475    14948  \n",
      "1490     2373  \n",
      "1500     2940  \n",
      "1501     2114  \n",
      "1515     1080  \n",
      "1523     1598  \n",
      "1530    13776  \n",
      "1606      363  \n",
      "1635    14018  \n",
      "1675     4173  \n",
      "1825     1209  \n",
      "All     58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model            M1   M10  M11    M2    M3     M4    M5     M6    M7    M8  \\\n",
      "gross_weight                                                                 \n",
      "1051              0     0    0     0     0      0     0      0     0     0   \n",
      "1155              0     0    0     0  2373      0     0      0     0     0   \n",
      "1185          14948     0    0     0     0      0     0      0     0     0   \n",
      "1335              0     0    0  1080     0      0     0  13776     0     0   \n",
      "1340              0     0    0     0     0      0     0      0     0  4173   \n",
      "1410              0     0    0     0     0      0     0      0  2940     0   \n",
      "1490              0     0    0     0     0      0  1598      0     0     0   \n",
      "1510              0  1209    0     0     0      0     0      0     0     0   \n",
      "1660              0     0  363     0     0      0     0      0     0     0   \n",
      "1720              0     0    0     0     0  14018     0      0     0     0   \n",
      "All           14948  1209  363  1080  2373  14018  1598  13776  2940  4173   \n",
      "\n",
      "model           M9    All  \n",
      "gross_weight               \n",
      "1051          2114   2114  \n",
      "1155             0   2373  \n",
      "1185             0  14948  \n",
      "1335             0  14856  \n",
      "1340             0   4173  \n",
      "1410             0   2940  \n",
      "1490             0   1598  \n",
      "1510             0   1209  \n",
      "1660             0    363  \n",
      "1720             0  14018  \n",
      "All           2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                   M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "is_front_fog_lights                                                           \n",
      "No                   14948  1209  363     0  2373      0  1598      0     0   \n",
      "Yes                      0     0    0  1080     0  14018     0  13776  2940   \n",
      "All                  14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                  M8    M9    All  \n",
      "is_front_fog_lights                     \n",
      "No                   4173     0  24664  \n",
      "Yes                     0  2114  33928  \n",
      "All                  4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                    M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "is_rear_window_wiper                                                           \n",
      "No                    14948  1209  363  1080  2373      0  1598  13776     0   \n",
      "Yes                       0     0    0     0     0  14018     0      0  2940   \n",
      "All                   14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                   M8    M9    All  \n",
      "is_rear_window_wiper                     \n",
      "No                    4173  2114  41634  \n",
      "Yes                      0     0  16958  \n",
      "All                   4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model                     M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "is_rear_window_washer                                                           \n",
      "No                     14948  1209  363  1080  2373      0  1598  13776     0   \n",
      "Yes                        0     0    0     0     0  14018     0      0  2940   \n",
      "All                    14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                    M8    M9    All  \n",
      "is_rear_window_washer                     \n",
      "No                     4173  2114  41634  \n",
      "Yes                       0     0  16958  \n",
      "All                    4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                       M1   M10  M11    M2    M3     M4    M5     M6  \\\n",
      "is_rear_window_defogger                                                     \n",
      "No                       14948  1209    0     0  2373      0  1598  13776   \n",
      "Yes                          0     0  363  1080     0  14018     0      0   \n",
      "All                      14948  1209  363  1080  2373  14018  1598  13776   \n",
      "\n",
      "model                      M7    M8    M9    All  \n",
      "is_rear_window_defogger                           \n",
      "No                          0  4173     0  38077  \n",
      "Yes                      2940     0  2114  20515  \n",
      "All                      2940  4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model               M1   M10  M11    M2    M3     M4    M5     M6    M7    M8  \\\n",
      "is_brake_assist                                                                 \n",
      "No               14948  1209    0     0  2373      0  1598      0     0  4173   \n",
      "Yes                  0     0  363  1080     0  14018     0  13776  2940     0   \n",
      "All              14948  1209  363  1080  2373  14018  1598  13776  2940  4173   \n",
      "\n",
      "model              M9    All  \n",
      "is_brake_assist               \n",
      "No               2114  26415  \n",
      "Yes                 0  32177  \n",
      "All              2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                   M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "is_power_door_locks                                                           \n",
      "No                   14948  1209    0     0     0      0     0      0     0   \n",
      "Yes                      0     0  363  1080  2373  14018  1598  13776  2940   \n",
      "All                  14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                  M8    M9    All  \n",
      "is_power_door_locks                     \n",
      "No                      0     0  16157  \n",
      "Yes                  4173  2114  42435  \n",
      "All                  4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                  M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "is_central_locking                                                           \n",
      "No                  14948  1209    0     0     0      0     0      0     0   \n",
      "Yes                     0     0  363  1080  2373  14018  1598  13776  2940   \n",
      "All                 14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                 M8    M9    All  \n",
      "is_central_locking                     \n",
      "No                     0     0  16157  \n",
      "Yes                 4173  2114  42435  \n",
      "All                 4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                 M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "is_power_steering                                                           \n",
      "No                     0  1209    0     0     0      0     0      0     0   \n",
      "Yes                14948     0  363  1080  2373  14018  1598  13776  2940   \n",
      "All                14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                M8    M9    All  \n",
      "is_power_steering                     \n",
      "No                    0     0   1209  \n",
      "Yes                4173  2114  57383  \n",
      "All                4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                                M1   M10  M11    M2    M3     M4    M5  \\\n",
      "is_driver_seat_height_adjustable                                              \n",
      "No                                14948  1209    0     0  2373      0  1598   \n",
      "Yes                                   0     0  363  1080     0  14018     0   \n",
      "All                               14948  1209  363  1080  2373  14018  1598   \n",
      "\n",
      "model                                M6    M7    M8    M9    All  \n",
      "is_driver_seat_height_adjustable                                  \n",
      "No                                    0     0  4173     0  24301  \n",
      "Yes                               13776  2940     0  2114  34291  \n",
      "All                               13776  2940  4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                             M1   M10  M11    M2    M3     M4    M5  \\\n",
      "is_day_night_rear_view_mirror                                              \n",
      "No                             14948  1209  363     0     0  14018  1598   \n",
      "Yes                                0     0    0  1080  2373      0     0   \n",
      "All                            14948  1209  363  1080  2373  14018  1598   \n",
      "\n",
      "model                             M6    M7    M8    M9    All  \n",
      "is_day_night_rear_view_mirror                                  \n",
      "No                                 0     0  4173     0  36309  \n",
      "Yes                            13776  2940     0  2114  22283  \n",
      "All                            13776  2940  4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model      M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "is_ecw                                                                       \n",
      "No      14948  1209    0     0     0      0     0      0     0     0     0   \n",
      "Yes         0     0  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "All     14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model     All  \n",
      "is_ecw         \n",
      "No      16157  \n",
      "Yes     42435  \n",
      "All     58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model              M1   M10  M11    M2    M3     M4    M5     M6    M7    M8  \\\n",
      "is_speed_alert                                                                 \n",
      "No                  0     0  363     0     0      0     0      0     0     0   \n",
      "Yes             14948  1209    0  1080  2373  14018  1598  13776  2940  4173   \n",
      "All             14948  1209  363  1080  2373  14018  1598  13776  2940  4173   \n",
      "\n",
      "model             M9    All  \n",
      "is_speed_alert               \n",
      "No                 0    363  \n",
      "Yes             2114  58229  \n",
      "All             2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model           M1   M10  M11    M2    M3     M4    M5     M6    M7    M8  \\\n",
      "ncap_rating                                                                 \n",
      "0            14948  1209    0     0     0      0     0      0  2940     0   \n",
      "2                0     0    0  1080  2373      0     0  13776     0  4173   \n",
      "3                0     0    0     0     0  14018     0      0     0     0   \n",
      "4                0     0    0     0     0      0     0      0     0     0   \n",
      "5                0     0  363     0     0      0  1598      0     0     0   \n",
      "All          14948  1209  363  1080  2373  14018  1598  13776  2940  4173   \n",
      "\n",
      "model          M9    All  \n",
      "ncap_rating               \n",
      "0               0  19097  \n",
      "2               0  21402  \n",
      "3               0  14018  \n",
      "4            2114   2114  \n",
      "5               0   1961  \n",
      "All          2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model        M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "is_claim                                                                       \n",
      "0         14030  1136  348  1000  2245  13117  1482  12837  2739  3929  1981   \n",
      "1           918    73   15    80   128    901   116    939   201   244   133   \n",
      "All       14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model       All  \n",
      "is_claim         \n",
      "0         54844  \n",
      "1          3748  \n",
      "All       58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "maximum_power_Kw                                                           \n",
      "30.10856          14948     0    0     0     0      0     0      0     0   \n",
      "41.71632              0     0    0     0     0      0     0      0     0   \n",
      "46.01328              0  1209    0     0     0      0     0      0     0   \n",
      "50.02676              0     0    0     0  2373      0     0      0     0   \n",
      "66.021                0     0    0  1080     0      0     0  13776  2940   \n",
      "66.22242              0     0    0     0     0      0  1598      0     0   \n",
      "73.02594              0     0    0     0     0      0     0      0     0   \n",
      "84.6337               0     0    0     0     0  14018     0      0     0   \n",
      "88.29656              0     0  363     0     0      0     0      0     0   \n",
      "All               14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model               M8    M9    All  \n",
      "maximum_power_Kw                     \n",
      "30.10856             0     0  14948  \n",
      "41.71632          4173     0   4173  \n",
      "46.01328             0     0   1209  \n",
      "50.02676             0     0   2373  \n",
      "66.021               0     0  17796  \n",
      "66.22242             0     0   1598  \n",
      "73.02594             0  2114   2114  \n",
      "84.6337              0     0  14018  \n",
      "88.29656             0     0    363  \n",
      "All               4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model              M1   M10  M11    M2    M3     M4    M5     M6    M7    M8  \\\n",
      "maximum_torque                                                                 \n",
      "60.0            14948     0    0     0     0      0     0      0     0     0   \n",
      "82.1                0     0    0     0     0      0     0      0     0  4173   \n",
      "85.0                0  1209    0     0     0      0     0      0     0     0   \n",
      "91.0                0     0    0     0  2373      0     0      0     0     0   \n",
      "113.0               0     0    0  1080     0      0     0  13776  2940     0   \n",
      "170.0               0     0  363     0     0      0     0      0     0     0   \n",
      "200.0               0     0    0     0     0      0  1598      0     0     0   \n",
      "250.0               0     0    0     0     0  14018     0      0     0     0   \n",
      "All             14948  1209  363  1080  2373  14018  1598  13776  2940  4173   \n",
      "\n",
      "model             M9    All  \n",
      "maximum_torque               \n",
      "60.0               0  14948  \n",
      "82.1               0   4173  \n",
      "85.0               0   1209  \n",
      "91.0               0   2373  \n",
      "113.0              0  17796  \n",
      "170.0              0    363  \n",
      "200.0           2114   3712  \n",
      "250.0              0  14018  \n",
      "All             2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                        M1   M10  M11    M2    M3     M4    M5     M6  \\\n",
      "torque_power_ratio_Nm/Kw                                                     \n",
      "1.711576619560443             0     0    0  1080     0      0     0  13776   \n",
      "1.819026457040192             0     0    0     0  2373      0     0      0   \n",
      "1.8472927815621925            0  1209    0     0     0      0     0      0   \n",
      "1.925329820323691             0     0  363     0     0      0     0      0   \n",
      "1.9680547085648972            0     0    0     0     0      0     0      0   \n",
      "1.9927887617342044        14948     0    0     0     0      0     0      0   \n",
      "2.7387528322127723            0     0    0     0     0      0     0      0   \n",
      "2.9539060681501574            0     0    0     0     0  14018     0      0   \n",
      "3.020125208350888             0     0    0     0     0      0  1598      0   \n",
      "All                       14948  1209  363  1080  2373  14018  1598  13776   \n",
      "\n",
      "model                       M7    M8    M9    All  \n",
      "torque_power_ratio_Nm/Kw                           \n",
      "1.711576619560443         2940     0     0  17796  \n",
      "1.819026457040192            0     0     0   2373  \n",
      "1.8472927815621925           0     0     0   1209  \n",
      "1.925329820323691            0     0     0    363  \n",
      "1.9680547085648972           0  4173     0   4173  \n",
      "1.9927887617342044           0     0     0  14948  \n",
      "2.7387528322127723           0     0  2114   2114  \n",
      "2.9539060681501574           0     0     0  14018  \n",
      "3.020125208350888            0     0     0   1598  \n",
      "All                       2940  4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                  M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "peak_power_rpm                                                               \n",
      "3161.7894429000003      0     0    0     0     0      0  1598      0     0   \n",
      "3232.6688052000004      0     0    0     0     0  14018     0      0     0   \n",
      "3486.6235053            0     0    0     0     0      0     0      0     0   \n",
      "4791.777324         14948     0    0     0     0      0     0      0     0   \n",
      "4851.9992652862375      0     0    0     0     0      0     0      0     0   \n",
      "4959.669714352941       0     0  363     0     0      0     0      0     0   \n",
      "5169.186008470589       0  1209    0     0     0      0     0      0     0   \n",
      "5249.511332307692       0     0    0     0  2373      0     0      0     0   \n",
      "5579.066628318584       0     0    0  1080     0      0     0  13776  2940   \n",
      "All                 14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                 M8    M9    All  \n",
      "peak_power_rpm                         \n",
      "3161.7894429000003     0     0   1598  \n",
      "3232.6688052000004     0     0  14018  \n",
      "3486.6235053           0  2114   2114  \n",
      "4791.777324            0     0  14948  \n",
      "4851.9992652862375  4173     0   4173  \n",
      "4959.669714352941      0     0    363  \n",
      "5169.186008470589      0     0   1209  \n",
      "5249.511332307692      0     0   2373  \n",
      "5579.066628318584      0     0  17796  \n",
      "All                 4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model                  M1   M10  M11    M2    M3     M4    M5     M6    M7  \\\n",
      "aspect_ratio                                                                 \n",
      "2.0136986301369864      0  1209    0     0     0      0     0      0     0   \n",
      "2.182089552238806       0     0    0     0     0      0     0      0     0   \n",
      "2.335593220338983   14948     0    0     0     0      0     0      0     0   \n",
      "2.4863013698630136      0     0  363     0     0      0     0      0     0   \n",
      "2.504026845637584       0     0    0     0  2373      0     0      0     0   \n",
      "2.5130718954248366      0     0    0     0     0      0     0  13776     0   \n",
      "2.619829284307288       0     0    0     0     0      0  1598      0     0   \n",
      "2.6299694189602447      0     0    0     0     0  14018     0      0     0   \n",
      "2.636963696369637       0     0    0  1080     0      0     0      0     0   \n",
      "2.66                    0     0    0     0     0      0     0      0  2940   \n",
      "2.6615589606928713      0     0    0     0     0      0     0      0     0   \n",
      "All                 14948  1209  363  1080  2373  14018  1598  13776  2940   \n",
      "\n",
      "model                 M8    M9    All  \n",
      "aspect_ratio                           \n",
      "2.0136986301369864     0     0   1209  \n",
      "2.182089552238806   4173     0   4173  \n",
      "2.335593220338983      0     0  14948  \n",
      "2.4863013698630136     0     0    363  \n",
      "2.504026845637584      0     0   2373  \n",
      "2.5130718954248366     0     0  13776  \n",
      "2.619829284307288      0     0   1598  \n",
      "2.6299694189602447     0     0  14018  \n",
      "2.636963696369637      0     0   1080  \n",
      "2.66                   0     0   2940  \n",
      "2.6615589606928713     0  2114   2114  \n",
      "All                 4173  2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model         M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "footprint                                                                       \n",
      "5219175    14948     0    0     0     0      0     0      0     0     0     0   \n",
      "5420625        0  1209    0     0     0      0     0      0     0     0     0   \n",
      "5891249        0     0    0     0  2373      0     0      0     0     0     0   \n",
      "5921100        0     0    0     0     0      0     0      0     0  4173     0   \n",
      "6671075        0     0    0     0     0      0     0  13776     0     0     0   \n",
      "6771525        0     0    0     0     0      0     0      0     0     0  2114   \n",
      "6931325        0     0    0  1080     0      0     0      0     0     0     0   \n",
      "6962550        0     0    0     0     0      0     0      0  2940     0     0   \n",
      "7002450        0     0    0     0     0      0  1598      0     0     0     0   \n",
      "7231323        0     0  363     0     0      0     0      0     0     0     0   \n",
      "7697000        0     0    0     0     0  14018     0      0     0     0     0   \n",
      "All        14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model        All  \n",
      "footprint         \n",
      "5219175    14948  \n",
      "5420625     1209  \n",
      "5891249     2373  \n",
      "5921100     4173  \n",
      "6671075    13776  \n",
      "6771525     2114  \n",
      "6931325     1080  \n",
      "6962550     2940  \n",
      "7002450     1598  \n",
      "7231323      363  \n",
      "7697000    14018  \n",
      "All        58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model         M1   M10  M11    M2    M3     M4    M5     M6    M7    M8    M9  \\\n",
      "volume_M3                                                                       \n",
      "7.7        14948     0    0     0     0      0     0      0     0     0     0   \n",
      "8.78           0     0    0     0  2373      0     0      0     0     0     0   \n",
      "9.89           0  1209    0     0     0      0     0      0     0     0     0   \n",
      "9.92           0     0    0     0     0      0     0      0     0  4173     0   \n",
      "10.16          0     0    0     0     0      0     0      0     0     0  2114   \n",
      "10.21          0     0    0     0     0      0     0  13776     0     0     0   \n",
      "10.44          0     0    0     0     0      0     0      0  2940     0     0   \n",
      "10.5           0     0    0  1080     0      0     0      0     0     0     0   \n",
      "10.66          0     0    0     0     0      0  1598      0     0     0     0   \n",
      "11.61          0     0  363     0     0      0     0      0     0     0     0   \n",
      "12.58          0     0    0     0     0  14018     0      0     0     0     0   \n",
      "All        14948  1209  363  1080  2373  14018  1598  13776  2940  4173  2114   \n",
      "\n",
      "model        All  \n",
      "volume_M3         \n",
      "7.7        14948  \n",
      "8.78        2373  \n",
      "9.89        1209  \n",
      "9.92        4173  \n",
      "10.16       2114  \n",
      "10.21      13776  \n",
      "10.44       2940  \n",
      "10.5        1080  \n",
      "10.66       1598  \n",
      "11.61        363  \n",
      "12.58      14018  \n",
      "All        58592  \n",
      "_________________________________________________________________________________________________________________________\n",
      "model            M1   M10  M11    M2    M3     M4    M5     M6    M7    M8  \\\n",
      "safety_index                                                                 \n",
      "0.0           14948  1209    0     0     0      0     0      0  2940     0   \n",
      "35.12             0     0    0     0  2373      0     0      0     0     0   \n",
      "39.68             0     0    0     0     0      0     0      0     0  4173   \n",
      "40.84             0     0    0     0     0      0     0  13776     0     0   \n",
      "42.0              0     0    0  1080     0      0     0      0     0     0   \n",
      "81.28             0     0    0     0     0      0     0      0     0     0   \n",
      "106.6             0     0    0     0     0      0  1598      0     0     0   \n",
      "116.1             0     0  363     0     0      0     0      0     0     0   \n",
      "226.44            0     0    0     0     0  14018     0      0     0     0   \n",
      "All           14948  1209  363  1080  2373  14018  1598  13776  2940  4173   \n",
      "\n",
      "model           M9    All  \n",
      "safety_index               \n",
      "0.0              0  19097  \n",
      "35.12            0   2373  \n",
      "39.68            0   4173  \n",
      "40.84            0  13776  \n",
      "42.0             0   1080  \n",
      "81.28         2114   2114  \n",
      "106.6            0   1598  \n",
      "116.1            0    363  \n",
      "226.44           0  14018  \n",
      "All           2114  58592  \n",
      "_________________________________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# OTHER REDUNDANT COLUMNS\n",
    "\n",
    "# (There are columns about car's characteristics which is unique for car's model, so if car's 'model' \n",
    "# is known the other features of car is fixed and there's no variation. Ex- All M1 model car have segament='A', fueltype=\n",
    "# 'CNG', airbags=2 and so on. Thus if we know the car's model we know about the other features and thereby these features \n",
    "# become redundant for predicting target variable.)\n",
    "\n",
    "# evidence no.1  [Through crosstab]\n",
    "\n",
    "for i in gb.columns[6:]:\n",
    "    print(pd.crosstab(gb[i],gb['model'],margins=True))\n",
    "    print('_________________________________________________________________________________________________________________________')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1d4992ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "column name:  make , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  segment , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  model , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  fuel_type , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  max_torque , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  max_power , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  engine_type , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  airbags , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_esc , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_adjustable_steering , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_tpms , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_parking_sensors , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_parking_camera , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  rear_brakes_type , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  displacement , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  cylinder , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  transmission_type , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  gear_box , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  steering_type , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  turning_radius , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  length , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  width , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  height , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  gross_weight , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_front_fog_lights , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_rear_window_wiper , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_rear_window_washer , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_rear_window_defogger , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_brake_assist , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_power_door_locks , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_central_locking , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_power_steering , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_driver_seat_height_adjustable , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_day_night_rear_view_mirror , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "column name:  is_ecw , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_speed_alert , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  ncap_rating , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  is_claim , P_value:  0.029490222196639326 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  maximum_power_Kw , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  maximum_torque , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  torque_power_ratio_Nm/Kw , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  peak_power_rpm , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  aspect_ratio , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  footprint , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  volume_M3 , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n",
      "column name:  safety_index , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., conclude: the column is related/significant wrt column model\n",
      "______________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# evidence no.2  [with statistical test]\n",
    "\n",
    "# H0: the attribute/column 'model' and other independent columns(car's features ) are not related.\n",
    "     #(independent of each other).(not significant)\n",
    "    \n",
    "# H1: column 'model' and the independent columns are dependent. other independent variable are significant wrt to 'model'\n",
    "\n",
    "l=[]\n",
    "from scipy.stats import chi2_contingency\n",
    "for i in gb.iloc[:,6:]:\n",
    "    c=pd.crosstab(gb[i],gb['model'])\n",
    "    z,pv,dof,ar=chi2_contingency(c)\n",
    "    print('column name: ',i,', P_value: ',pv, ', Significance level: 0.05 (5%)')\n",
    "    l.append(pv)\n",
    "    if pv<0.05:\n",
    "        print('Reject Null Hyp., conclude: the column is related/significant wrt column model')\n",
    "        print('______________________________________________________________________________________________')\n",
    "    else:\n",
    "        print('Fail to reject Null Hyp., conclude: the column is not related to column model') \n",
    "        print('______________________________________________________________________________________________')\n",
    "        \n",
    "# test suggests that all these columns are related to column 'model'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3ffa3dce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'variable relationship with model')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,10))\n",
    "sns.barplot(l, gb.columns[6:])\n",
    "plt.title('variable relationship with model')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "fb5092fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# evidence 3 [through correlation among these columns, using VIF]\n",
    "\n",
    "from category_encoders.woe import WOEEncoder \n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "w=WOEEncoder()\n",
    "X=w.fit_transform(gb.iloc[:,4:-1],gb['is_claim'])\n",
    "X_corr = X.corr()\n",
    "vif = pd.DataFrame()\n",
    "vif[\"VIF Factor\"] = [variance_inflation_factor(X_corr.values, i) for i in range(X_corr.shape[1])]\n",
    "vif[\"predictor_variable\"] = X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d77898f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>VIF Factor</th>\n",
       "      <th>predictor_variable</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>684417.336516</td>\n",
       "      <td>segment</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>222871.277154</td>\n",
       "      <td>cylinder</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>206720.119182</td>\n",
       "      <td>is_brake_assist</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>134981.051274</td>\n",
       "      <td>length</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>132008.095038</td>\n",
       "      <td>is_driver_seat_height_adjustable</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>101729.635944</td>\n",
       "      <td>is_tpms</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>81587.413705</td>\n",
       "      <td>peak_power_rpm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>81422.093622</td>\n",
       "      <td>model</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>63791.968477</td>\n",
       "      <td>torque_power_ratio_Nm/Kw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>55581.125930</td>\n",
       "      <td>is_day_night_rear_view_mirror</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>54645.072571</td>\n",
       "      <td>is_front_fog_lights</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>51027.154683</td>\n",
       "      <td>is_speed_alert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>41739.704632</td>\n",
       "      <td>fuel_type</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>37251.979648</td>\n",
       "      <td>height</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>26182.530586</td>\n",
       "      <td>transmission_type</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>23697.414413</td>\n",
       "      <td>is_ecw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>23596.615028</td>\n",
       "      <td>max_power</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>23596.615028</td>\n",
       "      <td>max_torque</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>22127.332937</td>\n",
       "      <td>volume_M3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>18746.357248</td>\n",
       "      <td>is_adjustable_steering</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>17316.268666</td>\n",
       "      <td>is_parking_camera</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>14955.033108</td>\n",
       "      <td>displacement</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>14702.775602</td>\n",
       "      <td>steering_type</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>14424.224808</td>\n",
       "      <td>airbags</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13869.605566</td>\n",
       "      <td>make</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>12095.611787</td>\n",
       "      <td>is_parking_sensors</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>10384.369144</td>\n",
       "      <td>gross_weight</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>10131.045354</td>\n",
       "      <td>rear_brakes_type</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>8439.066543</td>\n",
       "      <td>footprint</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>8127.107209</td>\n",
       "      <td>aspect_ratio</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>7897.912271</td>\n",
       "      <td>is_esc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>4990.048718</td>\n",
       "      <td>ncap_rating</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>4836.165323</td>\n",
       "      <td>width</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>2969.345748</td>\n",
       "      <td>is_power_steering</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>2844.274812</td>\n",
       "      <td>maximum_power_Kw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>2713.883909</td>\n",
       "      <td>is_central_locking</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>2713.883909</td>\n",
       "      <td>is_power_door_locks</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2684.941909</td>\n",
       "      <td>is_rear_window_washer</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2684.941909</td>\n",
       "      <td>is_rear_window_wiper</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2595.514416</td>\n",
       "      <td>gear_box</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2163.882231</td>\n",
       "      <td>engine_type</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>1909.320406</td>\n",
       "      <td>maximum_torque</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1071.934394</td>\n",
       "      <td>turning_radius</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1029.216642</td>\n",
       "      <td>is_rear_window_defogger</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.279363</td>\n",
       "      <td>area_cluster</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.893848</td>\n",
       "      <td>population_density</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>1.011396</td>\n",
       "      <td>is_claim</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       VIF Factor                predictor_variable\n",
       "3   684417.336516                           segment\n",
       "17  222871.277154                          cylinder\n",
       "30  206720.119182                   is_brake_assist\n",
       "22  134981.051274                            length\n",
       "34  132008.095038  is_driver_seat_height_adjustable\n",
       "12  101729.635944                           is_tpms\n",
       "43   81587.413705                    peak_power_rpm\n",
       "4    81422.093622                             model\n",
       "42   63791.968477          torque_power_ratio_Nm/Kw\n",
       "35   55581.125930     is_day_night_rear_view_mirror\n",
       "26   54645.072571               is_front_fog_lights\n",
       "37   51027.154683                    is_speed_alert\n",
       "5    41739.704632                         fuel_type\n",
       "24   37251.979648                            height\n",
       "18   26182.530586                 transmission_type\n",
       "36   23697.414413                            is_ecw\n",
       "7    23596.615028                         max_power\n",
       "6    23596.615028                        max_torque\n",
       "46   22127.332937                         volume_M3\n",
       "11   18746.357248            is_adjustable_steering\n",
       "14   17316.268666                 is_parking_camera\n",
       "16   14955.033108                      displacement\n",
       "20   14702.775602                     steering_type\n",
       "9    14424.224808                           airbags\n",
       "2    13869.605566                              make\n",
       "13   12095.611787                is_parking_sensors\n",
       "25   10384.369144                      gross_weight\n",
       "15   10131.045354                  rear_brakes_type\n",
       "45    8439.066543                         footprint\n",
       "44    8127.107209                      aspect_ratio\n",
       "10    7897.912271                            is_esc\n",
       "38    4990.048718                       ncap_rating\n",
       "23    4836.165323                             width\n",
       "33    2969.345748                 is_power_steering\n",
       "40    2844.274812                  maximum_power_Kw\n",
       "32    2713.883909                is_central_locking\n",
       "31    2713.883909               is_power_door_locks\n",
       "28    2684.941909             is_rear_window_washer\n",
       "27    2684.941909              is_rear_window_wiper\n",
       "19    2595.514416                          gear_box\n",
       "8     2163.882231                       engine_type\n",
       "41    1909.320406                    maximum_torque\n",
       "21    1071.934394                    turning_radius\n",
       "29    1029.216642           is_rear_window_defogger\n",
       "0        3.279363                      area_cluster\n",
       "1        2.893848                population_density\n",
       "39       1.011396                          is_claim"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vif.sort_values(by='VIF Factor', ascending=False)\n",
    "\n",
    "# These columns have high correlation among them."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c70c2c7c",
   "metadata": {},
   "source": [
    "### Statistical Test to identify Significant Columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b441e759",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "column name:  area_cluster , P_value:  1.412557511595789e-11 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  population_density , P_value:  1.4125575115958101e-11 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  make , P_value:  0.3516519554568966 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  segment , P_value:  0.02738747673628079 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  model , P_value:  0.02949022219663932 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  fuel_type , P_value:  0.056145343695656484 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  max_torque , P_value:  0.012915422090714527 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  max_power , P_value:  0.012915422090714527 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  engine_type , P_value:  0.029490222196639326 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  airbags , P_value:  0.733046343840305 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_esc , P_value:  0.47973082296004166 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_adjustable_steering , P_value:  0.0008041954126638532 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  is_tpms , P_value:  0.8804734284234931 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_parking_sensors , P_value:  0.046026600078480424 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  is_parking_camera , P_value:  0.8464941782641769 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  rear_brakes_type , P_value:  0.8804734284234931 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  displacement , P_value:  0.012915422090714527 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  cylinder , P_value:  0.0012196212137077615 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  transmission_type , P_value:  0.8913806451098147 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  gear_box , P_value:  0.8932484235563578 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  steering_type , P_value:  0.05680882959490323 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  turning_radius , P_value:  0.07929625358645849 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  length , P_value:  0.01991912083478038 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  width , P_value:  0.022070869729802045 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  height , P_value:  0.029490222196639326 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  gross_weight , P_value:  0.022070869729802045 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  is_front_fog_lights , P_value:  0.004438415801344458 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  is_rear_window_wiper , P_value:  0.5332800461995457 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_rear_window_washer , P_value:  0.5332800461995457 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_rear_window_defogger , P_value:  0.5426511057939621 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_brake_assist , P_value:  0.008799083467312552 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  is_power_door_locks , P_value:  0.11234220574905036 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_central_locking , P_value:  0.11234220574905036 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_power_steering , P_value:  0.6486012327453723 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_driver_seat_height_adjustable , P_value:  0.010185701302166342 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  is_day_night_rear_view_mirror , P_value:  0.055307437479256066 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_ecw , P_value:  0.11234220574905036 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_speed_alert , P_value:  0.09668666189604051 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  ncap_rating , P_value:  0.8325265632423358 , Significance level: 0.05 (5%)\n",
      "Fail to reject Null Hyp., conclude: The column is not significant\n",
      "_______________________________________________________\n",
      "column name:  is_claim , P_value:  0.0 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  maximum_power_Kw , P_value:  0.012915422090714527 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  maximum_torque , P_value:  0.012128789226425263 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  torque_power_ratio_Nm/Kw , P_value:  0.012915422090714527 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "column name:  peak_power_rpm , P_value:  0.012915422090714527 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  aspect_ratio , P_value:  0.029490222196639264 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  footprint , P_value:  0.02949022219663932 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  volume_M3 , P_value:  0.02949022219663932 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n",
      "column name:  safety_index , P_value:  0.021980961964016183 , Significance level: 0.05 (5%)\n",
      "Reject Null Hyp., Conclude: The column is Significant\n",
      "_______________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# H0: Independent column is not related to target variable. Independent column is not significant\n",
    "# H1: Independent column is related to target variable. Independent column is significant\n",
    "\n",
    "l=[]\n",
    "from scipy.stats import chi2_contingency\n",
    "for i in gb.iloc[:,4:]:\n",
    "    c=pd.crosstab(gb[i],gb['is_claim'])\n",
    "    z,pv,dof,ar=chi2_contingency(c)\n",
    "    print('column name: ',i,', P_value: ',pv, ', Significance level: 0.05 (5%)')\n",
    "    l.append(pv)\n",
    "    if pv<0.05:\n",
    "        print('Reject Null Hyp., Conclude: The column is Significant')\n",
    "    else:\n",
    "        print('Fail to reject Null Hyp., conclude: The column is not significant')\n",
    "    print('_______________________________________________________')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4dec837f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x1cc74396190>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visual representation of significant column\n",
    "\n",
    "plt.figure(figsize=(15,10))\n",
    "sns.barplot(l, gb.columns[4:])\n",
    "plt.title('variable relationship with is_claim')\n",
    "plt.axvline(x=0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f3b59ebd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38\n",
      "['policy_id', 'make', 'segment', 'fuel_type', 'max_torque', 'max_power', 'engine_type', 'airbags', 'is_esc', 'is_adjustable_steering', 'is_tpms', 'is_parking_sensors', 'is_parking_camera', 'rear_brakes_type', 'displacement', 'cylinder', 'transmission_type', 'gear_box', 'steering_type', 'turning_radius', 'length', 'width', 'height', 'gross_weight', 'is_front_fog_lights', 'is_rear_window_wiper', 'is_rear_window_washer', 'is_rear_window_defogger', 'is_brake_assist', 'is_power_door_locks', 'is_central_locking', 'is_power_steering', 'is_driver_seat_height_adjustable', 'is_day_night_rear_view_mirror', 'is_ecw', 'is_speed_alert', 'ncap_rating', 'area_cluster']\n"
     ]
    }
   ],
   "source": [
    "# Hence, the set of redundant columns\n",
    "\n",
    "redundant_list=['policy_id','make', 'segment',\n",
    "       'fuel_type', 'max_torque', 'max_power', 'engine_type', 'airbags',\n",
    "       'is_esc', 'is_adjustable_steering', 'is_tpms', 'is_parking_sensors',\n",
    "       'is_parking_camera', 'rear_brakes_type', 'displacement', 'cylinder',\n",
    "       'transmission_type', 'gear_box', 'steering_type', 'turning_radius',\n",
    "       'length', 'width', 'height', 'gross_weight', 'is_front_fog_lights',\n",
    "       'is_rear_window_wiper', 'is_rear_window_washer',\n",
    "       'is_rear_window_defogger', 'is_brake_assist', 'is_power_door_locks',\n",
    "       'is_central_locking', 'is_power_steering',\n",
    "       'is_driver_seat_height_adjustable', 'is_day_night_rear_view_mirror',\n",
    "       'is_ecw', 'is_speed_alert', 'ncap_rating','area_cluster']\n",
    "print(len(redundant_list))\n",
    "print(redundant_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4643121",
   "metadata": {},
   "source": [
    "###### Modified Dataframe after dropping the redundant columns and including news columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "dbbd2ff3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>policy_tenure</th>\n",
       "      <th>age_of_car</th>\n",
       "      <th>age_of_policyholder</th>\n",
       "      <th>population_density</th>\n",
       "      <th>model</th>\n",
       "      <th>is_claim</th>\n",
       "      <th>maximum_power_Kw</th>\n",
       "      <th>maximum_torque</th>\n",
       "      <th>torque_power_ratio_Nm/Kw</th>\n",
       "      <th>peak_power_rpm</th>\n",
       "      <th>aspect_ratio</th>\n",
       "      <th>footprint</th>\n",
       "      <th>volume_M3</th>\n",
       "      <th>safety_index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.515874</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.644231</td>\n",
       "      <td>4990</td>\n",
       "      <td>M1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.10856</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1.992789</td>\n",
       "      <td>4791.777324</td>\n",
       "      <td>2.335593</td>\n",
       "      <td>5219175</td>\n",
       "      <td>7.70</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.672619</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>27003</td>\n",
       "      <td>M1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.10856</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1.992789</td>\n",
       "      <td>4791.777324</td>\n",
       "      <td>2.335593</td>\n",
       "      <td>5219175</td>\n",
       "      <td>7.70</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.841110</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.384615</td>\n",
       "      <td>4076</td>\n",
       "      <td>M1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.10856</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1.992789</td>\n",
       "      <td>4791.777324</td>\n",
       "      <td>2.335593</td>\n",
       "      <td>5219175</td>\n",
       "      <td>7.70</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.900277</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.432692</td>\n",
       "      <td>21622</td>\n",
       "      <td>M2</td>\n",
       "      <td>0</td>\n",
       "      <td>66.02100</td>\n",
       "      <td>113.0</td>\n",
       "      <td>1.711577</td>\n",
       "      <td>5579.066628</td>\n",
       "      <td>2.636964</td>\n",
       "      <td>6931325</td>\n",
       "      <td>10.50</td>\n",
       "      <td>42.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.596403</td>\n",
       "      <td>0.11</td>\n",
       "      <td>0.634615</td>\n",
       "      <td>34738</td>\n",
       "      <td>M3</td>\n",
       "      <td>0</td>\n",
       "      <td>50.02676</td>\n",
       "      <td>91.0</td>\n",
       "      <td>1.819026</td>\n",
       "      <td>5249.511332</td>\n",
       "      <td>2.504027</td>\n",
       "      <td>5891249</td>\n",
       "      <td>8.78</td>\n",
       "      <td>35.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58587</th>\n",
       "      <td>0.355089</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.644231</td>\n",
       "      <td>8794</td>\n",
       "      <td>M3</td>\n",
       "      <td>0</td>\n",
       "      <td>50.02676</td>\n",
       "      <td>91.0</td>\n",
       "      <td>1.819026</td>\n",
       "      <td>5249.511332</td>\n",
       "      <td>2.504027</td>\n",
       "      <td>5891249</td>\n",
       "      <td>8.78</td>\n",
       "      <td>35.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58588</th>\n",
       "      <td>1.199642</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.519231</td>\n",
       "      <td>7788</td>\n",
       "      <td>M1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.10856</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1.992789</td>\n",
       "      <td>4791.777324</td>\n",
       "      <td>2.335593</td>\n",
       "      <td>5219175</td>\n",
       "      <td>7.70</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58589</th>\n",
       "      <td>1.162273</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.451923</td>\n",
       "      <td>34738</td>\n",
       "      <td>M1</td>\n",
       "      <td>0</td>\n",
       "      <td>30.10856</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1.992789</td>\n",
       "      <td>4791.777324</td>\n",
       "      <td>2.335593</td>\n",
       "      <td>5219175</td>\n",
       "      <td>7.70</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58590</th>\n",
       "      <td>1.236307</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.557692</td>\n",
       "      <td>8794</td>\n",
       "      <td>M6</td>\n",
       "      <td>0</td>\n",
       "      <td>66.02100</td>\n",
       "      <td>113.0</td>\n",
       "      <td>1.711577</td>\n",
       "      <td>5579.066628</td>\n",
       "      <td>2.513072</td>\n",
       "      <td>6671075</td>\n",
       "      <td>10.21</td>\n",
       "      <td>40.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58591</th>\n",
       "      <td>0.124429</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.442308</td>\n",
       "      <td>8794</td>\n",
       "      <td>M4</td>\n",
       "      <td>0</td>\n",
       "      <td>84.63370</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2.953906</td>\n",
       "      <td>3232.668805</td>\n",
       "      <td>2.629969</td>\n",
       "      <td>7697000</td>\n",
       "      <td>12.58</td>\n",
       "      <td>226.44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>58592 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       policy_tenure  age_of_car  age_of_policyholder  population_density  \\\n",
       "0           0.515874        0.05             0.644231                4990   \n",
       "1           0.672619        0.02             0.375000               27003   \n",
       "2           0.841110        0.02             0.384615                4076   \n",
       "3           0.900277        0.11             0.432692               21622   \n",
       "4           0.596403        0.11             0.634615               34738   \n",
       "...              ...         ...                  ...                 ...   \n",
       "58587       0.355089        0.13             0.644231                8794   \n",
       "58588       1.199642        0.02             0.519231                7788   \n",
       "58589       1.162273        0.05             0.451923               34738   \n",
       "58590       1.236307        0.14             0.557692                8794   \n",
       "58591       0.124429        0.02             0.442308                8794   \n",
       "\n",
       "      model  is_claim  maximum_power_Kw  maximum_torque  \\\n",
       "0        M1         0          30.10856            60.0   \n",
       "1        M1         0          30.10856            60.0   \n",
       "2        M1         0          30.10856            60.0   \n",
       "3        M2         0          66.02100           113.0   \n",
       "4        M3         0          50.02676            91.0   \n",
       "...     ...       ...               ...             ...   \n",
       "58587    M3         0          50.02676            91.0   \n",
       "58588    M1         0          30.10856            60.0   \n",
       "58589    M1         0          30.10856            60.0   \n",
       "58590    M6         0          66.02100           113.0   \n",
       "58591    M4         0          84.63370           250.0   \n",
       "\n",
       "       torque_power_ratio_Nm/Kw  peak_power_rpm  aspect_ratio  footprint  \\\n",
       "0                      1.992789     4791.777324      2.335593    5219175   \n",
       "1                      1.992789     4791.777324      2.335593    5219175   \n",
       "2                      1.992789     4791.777324      2.335593    5219175   \n",
       "3                      1.711577     5579.066628      2.636964    6931325   \n",
       "4                      1.819026     5249.511332      2.504027    5891249   \n",
       "...                         ...             ...           ...        ...   \n",
       "58587                  1.819026     5249.511332      2.504027    5891249   \n",
       "58588                  1.992789     4791.777324      2.335593    5219175   \n",
       "58589                  1.992789     4791.777324      2.335593    5219175   \n",
       "58590                  1.711577     5579.066628      2.513072    6671075   \n",
       "58591                  2.953906     3232.668805      2.629969    7697000   \n",
       "\n",
       "       volume_M3  safety_index  \n",
       "0           7.70          0.00  \n",
       "1           7.70          0.00  \n",
       "2           7.70          0.00  \n",
       "3          10.50         42.00  \n",
       "4           8.78         35.12  \n",
       "...          ...           ...  \n",
       "58587       8.78         35.12  \n",
       "58588       7.70          0.00  \n",
       "58589       7.70          0.00  \n",
       "58590      10.21         40.84  \n",
       "58591      12.58        226.44  \n",
       "\n",
       "[58592 rows x 14 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=gb.drop(redundant_list,axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "edc97770",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 58592 entries, 0 to 58591\n",
      "Data columns (total 14 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   policy_tenure             58592 non-null  float64\n",
      " 1   age_of_car                58592 non-null  float64\n",
      " 2   age_of_policyholder       58592 non-null  float64\n",
      " 3   population_density        58592 non-null  int64  \n",
      " 4   model                     58592 non-null  object \n",
      " 5   is_claim                  58592 non-null  int64  \n",
      " 6   maximum_power_Kw          58592 non-null  float64\n",
      " 7   maximum_torque            58592 non-null  float64\n",
      " 8   torque_power_ratio_Nm/Kw  58592 non-null  float64\n",
      " 9   peak_power_rpm            58592 non-null  float64\n",
      " 10  aspect_ratio              58592 non-null  float64\n",
      " 11  footprint                 58592 non-null  int64  \n",
      " 12  volume_M3                 58592 non-null  float64\n",
      " 13  safety_index              58592 non-null  float64\n",
      "dtypes: float64(10), int64(3), object(1)\n",
      "memory usage: 6.3+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51e45da0",
   "metadata": {},
   "source": [
    "### Visual Analysis of Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a17a74de",
   "metadata": {},
   "source": [
    "#### 1. UNIVARIATE ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7b83eb99",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 12 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# NUMERICAL COLUMNS\n",
    "\n",
    "df['is_claim'] = df['is_claim'].astype('object')\n",
    "df['safety_index'] = df['safety_index'].astype('object')\n",
    "dfnum = df.select_dtypes(include=np.number)\n",
    "fig,ax= plt.subplots(4,3,figsize=(15,10))\n",
    "\n",
    "for i,subplots in zip(dfnum ,ax.flatten()):\n",
    "    sns.distplot(dfnum[i],ax=subplots)\n",
    "    plt.title('dfnum[i]')\n",
    "plt.tight_layout()\n",
    "\n",
    "# 'population_density', age_of_car' and 'age_of_policyholder' have skewness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9e7e46bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "policy_tenure               0.053588\n",
       "age_of_car                  1.094081\n",
       "age_of_policyholder         0.640049\n",
       "population_density          1.674178\n",
       "maximum_power_Kw           -0.236599\n",
       "maximum_torque              0.671799\n",
       "torque_power_ratio_Nm/Kw    0.729319\n",
       "peak_power_rpm             -0.527585\n",
       "aspect_ratio               -0.785940\n",
       "footprint                  -0.107678\n",
       "volume_M3                   0.032390\n",
       "dtype: float64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dfnum.skew()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "cbfc7755",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='is_claim', ylabel='count'>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x504 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# CATEGORICAL COLUMNS \n",
    "\n",
    "plt.figure(figsize=(12,7))\n",
    "plt.subplot(221)\n",
    "sns.countplot(df['model'])\n",
    "\n",
    "plt.subplot(222)\n",
    "sns.countplot(df['safety_index'])\n",
    "\n",
    "plt.subplot(223)\n",
    "sns.countplot(df['is_claim'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6490e321",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['is_claim'] = df['is_claim'].astype('object')\n",
    "df['safety_index'] = df['safety_index'].astype('object')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f250ba25",
   "metadata": {},
   "source": [
    "#### 2. BIVARIATE ANALYSIS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9d64e6e",
   "metadata": {},
   "source": [
    "#### Numerical vs Categorical(target variable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "fdf8241f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 12 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# through boxplots. \n",
    "\n",
    "dfnum = df.select_dtypes(include=np.number)\n",
    "fig,ax= plt.subplots(4,3,figsize=(15,10))\n",
    "\n",
    "for i,subplots in zip(dfnum ,ax.flatten()):\n",
    "    sns.boxplot(df['is_claim'], dfnum[i], ax=subplots)\n",
    "    plt.title('dfnum[i]')\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "033a34cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='age_of_car', ylabel='Probability'>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Numerical v/s Categorical(target variable)\n",
    "# Through distribution plots(only for numerical columns that are continous)\n",
    "\n",
    "plt.figure(figsize=(8,3))\n",
    "sns.histplot(\n",
    "    df, x=\"age_of_car\", hue=\"is_claim\", element=\"step\",\n",
    "    stat=\"probability\", common_norm=False, kde=True, )\n",
    "\n",
    "# Customers who have claimed and who have not claimed an insurance within 6 months (target variable) both have the\n",
    "# same distribution of car's ages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "8b33b733",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='policy_tenure', ylabel='Probability'>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,3))\n",
    "sns.histplot(\n",
    "    df, x=\"policy_tenure\", hue=\"is_claim\", element=\"step\",\n",
    "    stat=\"probability\", common_norm=False, kde=True, )\n",
    "\n",
    "# Customers who have claimed and who have not claimed an insurance within 6 months (target variable) have a little\n",
    "# different distribution of policy_tenure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0e8c8682",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='age_of_policyholder', ylabel='Probability'>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,3))\n",
    "sns.histplot(\n",
    "    df, x=\"age_of_policyholder\", hue=\"is_claim\", element=\"step\",\n",
    "    stat=\"probability\", common_norm=False, kde=True,)\n",
    "\n",
    "# Customers who have claimed and who have not claimed an insurance within 6 months (target variable) both have almost\n",
    "# similar distribution of policyholder's age."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b22ad92d",
   "metadata": {},
   "source": [
    "#### Categorical v/s Categorical(target variable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "fc9a906c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dfcat=df.select_dtypes(include='object').drop('is_claim', axis=1)\n",
    "fig,ax = plt.subplots(1,2,figsize=(20,5))\n",
    "\n",
    "for i,subplot in zip(dfcat,ax.flatten()):\n",
    "    \n",
    "    pd.crosstab(df['is_claim'], dfcat[i], normalize= 'index').plot(kind='bar', ax= subplot)\n",
    "    plt.title('dfcat[i]')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3e881fe4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='safety_index', ylabel='footprint'>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot( df['safety_index'], df['footprint'])\n",
    "\n",
    "# possible inference: as safety index of customer's car increases, the average footprint value increase(higher footprint \n",
    "# means higher stability of car)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdf55875",
   "metadata": {},
   "source": [
    "### Outlier Checking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a773fe76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 12 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "dfnum = df.select_dtypes(include=np.number)\n",
    "fig,ax= plt.subplots(4,3,figsize=(15,10))\n",
    "\n",
    "for i,subplots in zip(dfnum ,ax.flatten()):\n",
    "    sns.boxplot(dfnum[i],ax=subplots)\n",
    "    plt.title('dfnum[i]')\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93c67bb9",
   "metadata": {},
   "source": [
    "#### Applying Transformation on columns that have huge skewness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a6d07964",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PowerTransformer\n",
    "\n",
    "p=PowerTransformer(method='yeo-johnson')\n",
    "df['age_of_car']=p.fit_transform(df[['age_of_car']])\n",
    "\n",
    "p=PowerTransformer(method='box-cox')\n",
    "df['age_of_policyholder']=p.fit_transform(df[['age_of_policyholder']])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51a6bd52",
   "metadata": {},
   "source": [
    "### Checking Class Imbalance in Target Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "48922864",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Target variable : is_claim')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.pie(df['is_claim'].value_counts(), radius=1, autopct='%.2f%%', labels= df['is_claim'].unique())\n",
    "plt.xlabel('Target variable : is_claim')\n",
    "\n",
    "# There's huge imbalance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "32269629",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.936032\n",
       "1    0.063968\n",
       "Name: is_claim, dtype: float64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gb['is_claim'].value_counts()/len(gb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "f35b7bf2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    54844\n",
       "1     3748\n",
       "Name: is_claim, dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gb['is_claim'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "b2780762",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['is_claim']=df['is_claim'].astype('int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "467153b6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "df79268b",
   "metadata": {},
   "source": [
    "### MODEL BUILDING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "100425ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>policy_tenure</th>\n",
       "      <th>age_of_car</th>\n",
       "      <th>age_of_policyholder</th>\n",
       "      <th>population_density</th>\n",
       "      <th>maximum_power_Kw</th>\n",
       "      <th>maximum_torque</th>\n",
       "      <th>torque_power_ratio_Nm/Kw</th>\n",
       "      <th>peak_power_rpm</th>\n",
       "      <th>aspect_ratio</th>\n",
       "      <th>footprint</th>\n",
       "      <th>volume_M3</th>\n",
       "      <th>safety_index</th>\n",
       "      <th>is_claim</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.042965</td>\n",
       "      <td>0.515874</td>\n",
       "      <td>-0.200500</td>\n",
       "      <td>1.338223</td>\n",
       "      <td>4990</td>\n",
       "      <td>30.10856</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1.992789</td>\n",
       "      <td>4791.777324</td>\n",
       "      <td>2.335593</td>\n",
       "      <td>5219175</td>\n",
       "      <td>7.70</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.042965</td>\n",
       "      <td>0.672619</td>\n",
       "      <td>-0.923772</td>\n",
       "      <td>-0.732891</td>\n",
       "      <td>27003</td>\n",
       "      <td>30.10856</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1.992789</td>\n",
       "      <td>4791.777324</td>\n",
       "      <td>2.335593</td>\n",
       "      <td>5219175</td>\n",
       "      <td>7.70</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.042965</td>\n",
       "      <td>0.841110</td>\n",
       "      <td>-0.923772</td>\n",
       "      <td>-0.628658</td>\n",
       "      <td>4076</td>\n",
       "      <td>30.10856</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1.992789</td>\n",
       "      <td>4791.777324</td>\n",
       "      <td>2.335593</td>\n",
       "      <td>5219175</td>\n",
       "      <td>7.70</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.168468</td>\n",
       "      <td>0.900277</td>\n",
       "      <td>0.862825</td>\n",
       "      <td>-0.153571</td>\n",
       "      <td>21622</td>\n",
       "      <td>66.02100</td>\n",
       "      <td>113.0</td>\n",
       "      <td>1.711577</td>\n",
       "      <td>5579.066628</td>\n",
       "      <td>2.636964</td>\n",
       "      <td>6931325</td>\n",
       "      <td>10.50</td>\n",
       "      <td>42.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.174320</td>\n",
       "      <td>0.596403</td>\n",
       "      <td>0.862825</td>\n",
       "      <td>1.284902</td>\n",
       "      <td>34738</td>\n",
       "      <td>50.02676</td>\n",
       "      <td>91.0</td>\n",
       "      <td>1.819026</td>\n",
       "      <td>5249.511332</td>\n",
       "      <td>2.504027</td>\n",
       "      <td>5891249</td>\n",
       "      <td>8.78</td>\n",
       "      <td>35.12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82261</th>\n",
       "      <td>-0.399710</td>\n",
       "      <td>0.986287</td>\n",
       "      <td>1.065219</td>\n",
       "      <td>0.874567</td>\n",
       "      <td>34738</td>\n",
       "      <td>88.29656</td>\n",
       "      <td>170.0</td>\n",
       "      <td>1.925330</td>\n",
       "      <td>4959.669714</td>\n",
       "      <td>2.486301</td>\n",
       "      <td>7231323</td>\n",
       "      <td>11.61</td>\n",
       "      <td>116.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82262</th>\n",
       "      <td>0.005647</td>\n",
       "      <td>1.121063</td>\n",
       "      <td>1.557442</td>\n",
       "      <td>0.162186</td>\n",
       "      <td>4076</td>\n",
       "      <td>84.63370</td>\n",
       "      <td>250.0</td>\n",
       "      <td>2.953906</td>\n",
       "      <td>3232.668805</td>\n",
       "      <td>2.629969</td>\n",
       "      <td>7697000</td>\n",
       "      <td>12.58</td>\n",
       "      <td>226.44</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82263</th>\n",
       "      <td>0.068488</td>\n",
       "      <td>1.093042</td>\n",
       "      <td>-0.274349</td>\n",
       "      <td>0.080350</td>\n",
       "      <td>6108</td>\n",
       "      <td>66.02100</td>\n",
       "      <td>113.0</td>\n",
       "      <td>1.711577</td>\n",
       "      <td>5579.066628</td>\n",
       "      <td>2.513072</td>\n",
       "      <td>6671075</td>\n",
       "      <td>10.21</td>\n",
       "      <td>40.84</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82264</th>\n",
       "      <td>0.068488</td>\n",
       "      <td>0.556849</td>\n",
       "      <td>0.824830</td>\n",
       "      <td>0.092592</td>\n",
       "      <td>6112</td>\n",
       "      <td>66.02100</td>\n",
       "      <td>113.0</td>\n",
       "      <td>1.711577</td>\n",
       "      <td>5579.066628</td>\n",
       "      <td>2.513072</td>\n",
       "      <td>6671075</td>\n",
       "      <td>10.21</td>\n",
       "      <td>40.84</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82265</th>\n",
       "      <td>-0.042965</td>\n",
       "      <td>0.038060</td>\n",
       "      <td>-1.500461</td>\n",
       "      <td>-0.563467</td>\n",
       "      <td>27003</td>\n",
       "      <td>30.10856</td>\n",
       "      <td>60.0</td>\n",
       "      <td>1.992789</td>\n",
       "      <td>4791.777324</td>\n",
       "      <td>2.335593</td>\n",
       "      <td>5219175</td>\n",
       "      <td>7.70</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>82266 rows Ã— 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          model  policy_tenure  age_of_car  age_of_policyholder  \\\n",
       "0     -0.042965       0.515874   -0.200500             1.338223   \n",
       "1     -0.042965       0.672619   -0.923772            -0.732891   \n",
       "2     -0.042965       0.841110   -0.923772            -0.628658   \n",
       "3      0.168468       0.900277    0.862825            -0.153571   \n",
       "4     -0.174320       0.596403    0.862825             1.284902   \n",
       "...         ...            ...         ...                  ...   \n",
       "82261 -0.399710       0.986287    1.065219             0.874567   \n",
       "82262  0.005647       1.121063    1.557442             0.162186   \n",
       "82263  0.068488       1.093042   -0.274349             0.080350   \n",
       "82264  0.068488       0.556849    0.824830             0.092592   \n",
       "82265 -0.042965       0.038060   -1.500461            -0.563467   \n",
       "\n",
       "       population_density  maximum_power_Kw  maximum_torque  \\\n",
       "0                    4990          30.10856            60.0   \n",
       "1                   27003          30.10856            60.0   \n",
       "2                    4076          30.10856            60.0   \n",
       "3                   21622          66.02100           113.0   \n",
       "4                   34738          50.02676            91.0   \n",
       "...                   ...               ...             ...   \n",
       "82261               34738          88.29656           170.0   \n",
       "82262                4076          84.63370           250.0   \n",
       "82263                6108          66.02100           113.0   \n",
       "82264                6112          66.02100           113.0   \n",
       "82265               27003          30.10856            60.0   \n",
       "\n",
       "       torque_power_ratio_Nm/Kw  peak_power_rpm  aspect_ratio  footprint  \\\n",
       "0                      1.992789     4791.777324      2.335593    5219175   \n",
       "1                      1.992789     4791.777324      2.335593    5219175   \n",
       "2                      1.992789     4791.777324      2.335593    5219175   \n",
       "3                      1.711577     5579.066628      2.636964    6931325   \n",
       "4                      1.819026     5249.511332      2.504027    5891249   \n",
       "...                         ...             ...           ...        ...   \n",
       "82261                  1.925330     4959.669714      2.486301    7231323   \n",
       "82262                  2.953906     3232.668805      2.629969    7697000   \n",
       "82263                  1.711577     5579.066628      2.513072    6671075   \n",
       "82264                  1.711577     5579.066628      2.513072    6671075   \n",
       "82265                  1.992789     4791.777324      2.335593    5219175   \n",
       "\n",
       "       volume_M3 safety_index  is_claim  \n",
       "0           7.70          0.0         0  \n",
       "1           7.70          0.0         0  \n",
       "2           7.70          0.0         0  \n",
       "3          10.50         42.0         0  \n",
       "4           8.78        35.12         0  \n",
       "...          ...          ...       ...  \n",
       "82261      11.61        116.1         1  \n",
       "82262      12.58       226.44         1  \n",
       "82263      10.21        40.84         1  \n",
       "82264      10.21        40.84         1  \n",
       "82265       7.70          0.0         1  \n",
       "\n",
       "[82266 rows x 14 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Since the target variable is highly imbalanced, SMOTE is applied to bring balance in it \n",
    "\n",
    "df['is_claim']=df['is_claim'].astype('int64')\n",
    "x=pd.concat([w.fit_transform(df.model,df.is_claim),df.drop(['is_claim','model'],axis=1)],axis=1)\n",
    "y=df.is_claim\n",
    "from imblearn.over_sampling import SMOTE\n",
    "xr,yr=SMOTE(sampling_strategy=0.5).fit_resample(x,y)\n",
    "df=pd.concat([xr,pd.DataFrame(yr)],axis=1)\n",
    "df\n",
    "\n",
    "# df is new dataframe with balanced target variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "4fdbca48",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.safety_index=df.safety_index.astype('float64')\n",
    "xr.safety_index=xr.safety_index.astype('float64')\n",
    "x.safety_index=x.safety_index.astype('float64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "7f1ca29e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Target variable : is_claim')"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# target variable is now balanced\n",
    "plt.pie(df['is_claim'].value_counts(), radius=1, autopct='%.2f%%', labels= df['is_claim'].unique())\n",
    "plt.xlabel('Target variable : is_claim')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "fb363f40",
   "metadata": {},
   "outputs": [],
   "source": [
    "models_df = pd.DataFrame(columns=['Model_Name','AUC Score', 'Precision Score', 'Recall Score',\n",
    "                                       'Accuracy Score', 'Kappa Score', 'f1-score'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "bdedc8fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "models_df2 = pd.DataFrame(columns=['Model_Name','AUC Score', 'Precision Score', 'Recall Score',\n",
    "  'Accuracy Score', 'Kappa Score', 'f1-score'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f7d8816",
   "metadata": {},
   "source": [
    "#### BASE MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "2d786ec3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.67      1.00      0.80     38391\n",
      "           1       0.00      0.00      0.00     19195\n",
      "\n",
      "    accuracy                           0.67     57586\n",
      "   macro avg       0.33      0.50      0.40     57586\n",
      "weighted avg       0.44      0.67      0.53     57586\n",
      "\n",
      "\n",
      "Test data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.67      1.00      0.80     16453\n",
      "           1       0.00      0.00      0.00      8227\n",
      "\n",
      "    accuracy                           0.67     24680\n",
      "   macro avg       0.33      0.50      0.40     24680\n",
      "weighted avg       0.44      0.67      0.53     24680\n",
      "\n",
      "[[16453     0]\n",
      " [ 8227     0]]\n"
     ]
    }
   ],
   "source": [
    "# Base model: logistic regression. (with all its default parameters)\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "lr=LogisticRegression()\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)\n",
    "\n",
    "lr.fit(xtrain,ytrain)\n",
    "from sklearn.metrics import accuracy_score,classification_report,roc_auc_score,roc_curve, confusion_matrix\n",
    "accuracy_score(ytest,lr.predict(xtest))\n",
    "\n",
    "print('Training data report')\n",
    "print(classification_report(ytrain,lr.predict(xtrain)))\n",
    "print()\n",
    "print('Test data report')\n",
    "print(classification_report(ytest,lr.predict(xtest)))\n",
    "print(confusion_matrix(ytest,lr.predict(xtest)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "5a544d9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Model_Name AUC Score Precision Score Recall Score Accuracy Score  \\\n",
       "0  Logistic_regression       0.5             0.0          0.0       0.666653   \n",
       "\n",
       "  Kappa Score f1-score  \n",
       "0         0.0      0.0  "
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "ypred=lr.predict(xtest)\n",
    "models_df = models_df.append({'Model_Name':'Logistic_regression','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "f2c97a73",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=lr.predict(x)\n",
    "ytest=y\n",
    "models_df2 = models_df2.append({'Model_Name':'Logistic_regression','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df2\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "ea64dd4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Density'>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)\n",
    "sns.distplot(lr.predict_proba(xtest)[:,1])\n",
    "# distribution of probabilities for class1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "7f3ba517",
   "metadata": {},
   "outputs": [],
   "source": [
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)\n",
    "fpr,tpr,threshold =roc_curve(ytest,lr.predict_proba(xtest)[:,1]) # calculating fpr, tpr, thresh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "c5c07c07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Probability Cutoff</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.288113</td>\n",
       "      <td>0.510303</td>\n",
       "      <td>0.338074</td>\n",
       "      <td>0.982497</td>\n",
       "      <td>0.352917</td>\n",
       "      <td>0.013955</td>\n",
       "      <td>0.50305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.268113</td>\n",
       "      <td>0.508874</td>\n",
       "      <td>0.337391</td>\n",
       "      <td>0.987116</td>\n",
       "      <td>0.349473</td>\n",
       "      <td>0.011981</td>\n",
       "      <td>0.502895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.278113</td>\n",
       "      <td>0.509117</td>\n",
       "      <td>0.33751</td>\n",
       "      <td>0.985535</td>\n",
       "      <td>0.350324</td>\n",
       "      <td>0.012321</td>\n",
       "      <td>0.502822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.298113</td>\n",
       "      <td>0.516898</td>\n",
       "      <td>0.341506</td>\n",
       "      <td>0.942993</td>\n",
       "      <td>0.374878</td>\n",
       "      <td>0.023465</td>\n",
       "      <td>0.501422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.258113</td>\n",
       "      <td>0.503586</td>\n",
       "      <td>0.334956</td>\n",
       "      <td>0.995503</td>\n",
       "      <td>0.339627</td>\n",
       "      <td>0.004804</td>\n",
       "      <td>0.501255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.248113</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.333347</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.333347</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.500015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.308113</td>\n",
       "      <td>0.51143</td>\n",
       "      <td>0.33924</td>\n",
       "      <td>0.877233</td>\n",
       "      <td>0.389506</td>\n",
       "      <td>0.01637</td>\n",
       "      <td>0.489272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.318113</td>\n",
       "      <td>0.513468</td>\n",
       "      <td>0.340829</td>\n",
       "      <td>0.818038</td>\n",
       "      <td>0.411953</td>\n",
       "      <td>0.019953</td>\n",
       "      <td>0.481178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.328113</td>\n",
       "      <td>0.502473</td>\n",
       "      <td>0.335127</td>\n",
       "      <td>0.620639</td>\n",
       "      <td>0.463088</td>\n",
       "      <td>0.004078</td>\n",
       "      <td>0.435238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.338113</td>\n",
       "      <td>0.510346</td>\n",
       "      <td>0.341991</td>\n",
       "      <td>0.545764</td>\n",
       "      <td>0.498541</td>\n",
       "      <td>0.01801</td>\n",
       "      <td>0.420491</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.348113</td>\n",
       "      <td>0.493792</td>\n",
       "      <td>0.323885</td>\n",
       "      <td>0.283335</td>\n",
       "      <td>0.563938</td>\n",
       "      <td>-0.012817</td>\n",
       "      <td>0.302256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0.358113</td>\n",
       "      <td>0.496195</td>\n",
       "      <td>0.325262</td>\n",
       "      <td>0.204084</td>\n",
       "      <td>0.593558</td>\n",
       "      <td>-0.008391</td>\n",
       "      <td>0.250803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.368113</td>\n",
       "      <td>0.501637</td>\n",
       "      <td>0.338858</td>\n",
       "      <td>0.134192</td>\n",
       "      <td>0.624109</td>\n",
       "      <td>0.003856</td>\n",
       "      <td>0.192251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.378113</td>\n",
       "      <td>0.501213</td>\n",
       "      <td>0.339882</td>\n",
       "      <td>0.084113</td>\n",
       "      <td>0.640235</td>\n",
       "      <td>0.002988</td>\n",
       "      <td>0.134853</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Probability Cutoff AUC Score Precision Score Recall Score Accuracy Score  \\\n",
       "4            0.288113  0.510303        0.338074     0.982497       0.352917   \n",
       "2            0.268113  0.508874        0.337391     0.987116       0.349473   \n",
       "3            0.278113  0.509117         0.33751     0.985535       0.350324   \n",
       "5            0.298113  0.516898        0.341506     0.942993       0.374878   \n",
       "1            0.258113  0.503586        0.334956     0.995503       0.339627   \n",
       "0            0.248113       0.5        0.333347          1.0       0.333347   \n",
       "6            0.308113   0.51143         0.33924     0.877233       0.389506   \n",
       "7            0.318113  0.513468        0.340829     0.818038       0.411953   \n",
       "8            0.328113  0.502473        0.335127     0.620639       0.463088   \n",
       "9            0.338113  0.510346        0.341991     0.545764       0.498541   \n",
       "10           0.348113  0.493792        0.323885     0.283335       0.563938   \n",
       "11           0.358113  0.496195        0.325262     0.204084       0.593558   \n",
       "12           0.368113  0.501637        0.338858     0.134192       0.624109   \n",
       "13           0.378113  0.501213        0.339882     0.084113       0.640235   \n",
       "\n",
       "   Kappa Score  f1-score  \n",
       "4     0.013955   0.50305  \n",
       "2     0.011981  0.502895  \n",
       "3     0.012321  0.502822  \n",
       "5     0.023465  0.501422  \n",
       "1     0.004804  0.501255  \n",
       "0          0.0  0.500015  \n",
       "6      0.01637  0.489272  \n",
       "7     0.019953  0.481178  \n",
       "8     0.004078  0.435238  \n",
       "9      0.01801  0.420491  \n",
       "10   -0.012817  0.302256  \n",
       "11   -0.008391  0.250803  \n",
       "12    0.003856  0.192251  \n",
       "13    0.002988  0.134853  "
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "import sklearn.metrics as metrics\n",
    "cutoff_per = pd.DataFrame(columns=['Probability Cutoff', 'AUC Score', 'Precision Score', 'Recall Score',\n",
    "                                       'Accuracy Score', 'Kappa Score', 'f1-score'])\n",
    "for cutoff in [i for i in np.arange(lr.predict_proba(xtest)[:,1].min(),lr.predict_proba(xtest)[:,1].max() ,0.01)]:\n",
    "\n",
    "\n",
    "#   ypred_prob = logreg.predict(xtest_c)\n",
    "  ypred = [ 0 if x < cutoff else 1 for x in lr.predict_proba(xtest)[:,1]]\n",
    "\n",
    "  global cutoff_per\n",
    "\n",
    "    # append the results to the dataframe 'score_card'\n",
    "    # 'ignore_index = True' do not consider the index labels\n",
    "  cutoff_per = cutoff_per.append({'Probability Cutoff': cutoff,\n",
    "                                    'AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "cutoff_per.sort_values(by='f1-score', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "64236e31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TPR</th>\n",
       "      <th>FPR</th>\n",
       "      <th>Threshold</th>\n",
       "      <th>Difference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.938009</td>\n",
       "      <td>0.899775</td>\n",
       "      <td>0.300842</td>\n",
       "      <td>0.038234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.938252</td>\n",
       "      <td>0.900383</td>\n",
       "      <td>0.300842</td>\n",
       "      <td>0.037869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.930716</td>\n",
       "      <td>0.892907</td>\n",
       "      <td>0.301745</td>\n",
       "      <td>0.037809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.930594</td>\n",
       "      <td>0.892846</td>\n",
       "      <td>0.301745</td>\n",
       "      <td>0.037748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.936186</td>\n",
       "      <td>0.898438</td>\n",
       "      <td>0.300842</td>\n",
       "      <td>0.037748</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        TPR       FPR  Threshold  Difference\n",
       "0  0.938009  0.899775   0.300842    0.038234\n",
       "1  0.938252  0.900383   0.300842    0.037869\n",
       "2  0.930716  0.892907   0.301745    0.037809\n",
       "3  0.930594  0.892846   0.301745    0.037748\n",
       "4  0.936186  0.898438   0.300842    0.037748"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using Youden's index to find most suitable value of threshold\n",
    "\n",
    "fpr,tpr,threshold =roc_curve(ytest,lr.predict_proba(xtest)[:,1])\n",
    "youdens_table = pd.DataFrame({'TPR': tpr,\n",
    "                             'FPR': fpr,\n",
    "                             'Threshold': threshold})\n",
    "\n",
    "\n",
    "# calculate the difference between TPR and FPR for each threshold and store the values in a new column 'Difference'\n",
    "youdens_table['Difference'] = youdens_table.TPR - youdens_table.FPR\n",
    "\n",
    "\n",
    "youdens_table = youdens_table.sort_values('Difference', ascending = False).reset_index(drop = True)\n",
    "\n",
    "# print the first five observations\n",
    "youdens_table.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "c0edc5a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.76      0.10      0.18     16453\n",
      "           1       0.34      0.94      0.50      8227\n",
      "\n",
      "    accuracy                           0.38     24680\n",
      "   macro avg       0.55      0.52      0.34     24680\n",
      "weighted avg       0.62      0.38      0.29     24680\n",
      "\n",
      "[[ 1649 14804]\n",
      " [  510  7717]]\n"
     ]
    }
   ],
   "source": [
    "# Checking model performance with new threshold value:\n",
    "\n",
    "print(classification_report(ytest,[ 0 if x < youdens_table['Threshold'][0] else 1 for x in lr.predict_proba(xtest)[:,1]]))\n",
    "print(confusion_matrix(ytest,[ 0 if x < youdens_table['Threshold'][0] else 1 for x in lr.predict_proba(xtest)[:,1]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "a5198d43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Logistic_regression with youden_index(threshold)</td>\n",
       "      <td>0.519117</td>\n",
       "      <td>0.342658</td>\n",
       "      <td>0.938009</td>\n",
       "      <td>0.379498</td>\n",
       "      <td>0.026656</td>\n",
       "      <td>0.501951</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Model_Name AUC Score Precision Score  \\\n",
       "0                               Logistic_regression       0.5             0.0   \n",
       "1  Logistic_regression with youden_index(threshold)  0.519117        0.342658   \n",
       "\n",
       "  Recall Score Accuracy Score Kappa Score  f1-score  \n",
       "0          0.0       0.666653         0.0       0.0  \n",
       "1     0.938009       0.379498    0.026656  0.501951  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "ypred= [ 0 if x < youdens_table['Threshold'][0] else 1 for x in lr.predict_proba(xtest)[:,1] ]\n",
    "models_df = models_df.append({'Model_Name':'Logistic_regression with youden_index(threshold)',\n",
    "                              'AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "ed8f3724",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=[ 0 if x < youdens_table['Threshold'][0] else 1 for x in lr.predict_proba(x)[:,1] ]\n",
    "ytest=y\n",
    "models_df2 = models_df2.append({'Model_Name':'Logistic_regression with youden_index(threshold)','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df2\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "321ef1f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     38391\n",
      "           1       1.00      1.00      1.00     19195\n",
      "\n",
      "    accuracy                           1.00     57586\n",
      "   macro avg       1.00      1.00      1.00     57586\n",
      "weighted avg       1.00      1.00      1.00     57586\n",
      "\n",
      "[[38391     0]\n",
      " [    0 19195]]\n",
      "\n",
      "Test data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.89      0.90     16453\n",
      "           1       0.79      0.81      0.80      8227\n",
      "\n",
      "    accuracy                           0.87     24680\n",
      "   macro avg       0.85      0.85      0.85     24680\n",
      "weighted avg       0.87      0.87      0.87     24680\n",
      "\n",
      "[[14659  1794]\n",
      " [ 1537  6690]]\n"
     ]
    }
   ],
   "source": [
    "# Second Base Model: Decision Tree (with default parameters)\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "dt1=DecisionTreeClassifier()\n",
    "dt1.fit(xtrain,ytrain)\n",
    "from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n",
    "accuracy_score(ytest,dt1.predict(xtest))\n",
    "\n",
    "print('Training data report')\n",
    "print(classification_report(ytrain,dt1.predict(xtrain)))\n",
    "print(confusion_matrix(ytrain,dt1.predict(xtrain)))\n",
    "print()\n",
    "print('Test data report')\n",
    "print(classification_report(ytest,dt1.predict(xtest)))\n",
    "print(confusion_matrix(ytest,dt1.predict(xtest)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "0528c372",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Logistic_regression with youden_index(threshold)</td>\n",
       "      <td>0.519117</td>\n",
       "      <td>0.342658</td>\n",
       "      <td>0.938009</td>\n",
       "      <td>0.379498</td>\n",
       "      <td>0.026656</td>\n",
       "      <td>0.501951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.852069</td>\n",
       "      <td>0.788543</td>\n",
       "      <td>0.813176</td>\n",
       "      <td>0.865032</td>\n",
       "      <td>0.698682</td>\n",
       "      <td>0.80067</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Model_Name AUC Score Precision Score  \\\n",
       "0                               Logistic_regression       0.5             0.0   \n",
       "1  Logistic_regression with youden_index(threshold)  0.519117        0.342658   \n",
       "2                                     Decision Tree  0.852069        0.788543   \n",
       "\n",
       "  Recall Score Accuracy Score Kappa Score  f1-score  \n",
       "0          0.0       0.666653         0.0       0.0  \n",
       "1     0.938009       0.379498    0.026656  0.501951  \n",
       "2     0.813176       0.865032    0.698682   0.80067  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ypred=dt1.predict(xtest)\n",
    "models_df = models_df.append({'Model_Name':'Decision Tree','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "b9e7000e",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=dt1.predict(x)\n",
    "ytest=y\n",
    "models_df2 = models_df2.append({'Model_Name':'Decision Tree','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df2\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "4728cab6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'criterion': 'entropy', 'max_depth': 9, 'min_samples_leaf': 6}\n",
      "0.7278504504458051\n",
      "Training data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.72      0.98      0.83     38391\n",
      "           1       0.87      0.23      0.37     19195\n",
      "\n",
      "    accuracy                           0.73     57586\n",
      "   macro avg       0.79      0.61      0.60     57586\n",
      "weighted avg       0.77      0.73      0.68     57586\n",
      "\n",
      "[[37705   686]\n",
      " [14717  4478]]\n",
      "\n",
      "Test data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.72      0.98      0.83     16453\n",
      "           1       0.87      0.24      0.37      8227\n",
      "\n",
      "    accuracy                           0.73     24680\n",
      "   macro avg       0.79      0.61      0.60     24680\n",
      "weighted avg       0.77      0.73      0.68     24680\n",
      "\n",
      "[[16147   306]\n",
      " [ 6261  1966]]\n"
     ]
    }
   ],
   "source": [
    "# Decision Tree with Hyperparameter tuning\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)\n",
    "\n",
    "p={'criterion':['gini','entropy'],'min_samples_leaf':[i for i in range(1,10)],'max_depth':[i for i in range(7,10)]}\n",
    "\n",
    "m=GridSearchCV(cv=5,estimator=DecisionTreeClassifier(),param_grid=p)\n",
    "\n",
    "m.fit(xtrain,ytrain)\n",
    "\n",
    "print(m.best_params_)\n",
    "print(m.best_score_)\n",
    "\n",
    "from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n",
    "\n",
    "accuracy_score(ytest,m.predict(xtest))\n",
    "\n",
    "print('Training data report')\n",
    "print(classification_report(ytrain,m.predict(xtrain)))\n",
    "print(confusion_matrix(ytrain,m.predict(xtrain)))\n",
    "print()\n",
    "print('Test data report')\n",
    "print(classification_report(ytest,m.predict(xtest)))\n",
    "print(confusion_matrix(ytest,m.predict(xtest)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "02c079f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Logistic_regression with youden_index(threshold)</td>\n",
       "      <td>0.519117</td>\n",
       "      <td>0.342658</td>\n",
       "      <td>0.938009</td>\n",
       "      <td>0.379498</td>\n",
       "      <td>0.026656</td>\n",
       "      <td>0.501951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.852069</td>\n",
       "      <td>0.788543</td>\n",
       "      <td>0.813176</td>\n",
       "      <td>0.865032</td>\n",
       "      <td>0.698682</td>\n",
       "      <td>0.80067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Decision Tree with criterion:entropy,max_depth...</td>\n",
       "      <td>0.610185</td>\n",
       "      <td>0.865317</td>\n",
       "      <td>0.238969</td>\n",
       "      <td>0.733914</td>\n",
       "      <td>0.269056</td>\n",
       "      <td>0.374512</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Model_Name AUC Score  \\\n",
       "0                                Logistic_regression       0.5   \n",
       "1   Logistic_regression with youden_index(threshold)  0.519117   \n",
       "2                                      Decision Tree  0.852069   \n",
       "3  Decision Tree with criterion:entropy,max_depth...  0.610185   \n",
       "\n",
       "  Precision Score Recall Score Accuracy Score Kappa Score  f1-score  \n",
       "0             0.0          0.0       0.666653         0.0       0.0  \n",
       "1        0.342658     0.938009       0.379498    0.026656  0.501951  \n",
       "2        0.788543     0.813176       0.865032    0.698682   0.80067  \n",
       "3        0.865317     0.238969       0.733914    0.269056  0.374512  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ypred=m.predict(xtest)\n",
    "d= m.best_params_\n",
    "models_df = models_df.append({'Model_Name':str('Decision Tree with '+','.join([str(i) + ':' + str(j) for i, j in zip(list(d.keys()), \n",
    "                                                                                                                     list(d.values()))])),\n",
    "                              'AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "1fb9df12",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=m.predict(x)\n",
    "ytest=y\n",
    "d= m.best_params_\n",
    "models_df2 = models_df2.append({'Model_Name':str('Decision Tree with '+','.join([str(i) + ':' + str(j) for i, j in zip(list(d.keys()), \n",
    "                                                                                                                     list(d.values()))])),'AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df2\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "bcffde2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Variable</th>\n",
       "      <th>Importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>age_of_car</td>\n",
       "      <td>0.495089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>policy_tenure</td>\n",
       "      <td>0.209197</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>age_of_policyholder</td>\n",
       "      <td>0.161262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>population_density</td>\n",
       "      <td>0.067101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>footprint</td>\n",
       "      <td>0.012005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>maximum_torque</td>\n",
       "      <td>0.011173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>aspect_ratio</td>\n",
       "      <td>0.009333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>model</td>\n",
       "      <td>0.008827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>safety_index</td>\n",
       "      <td>0.007339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>torque_power_ratio_Nm/Kw</td>\n",
       "      <td>0.005977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>volume_M3</td>\n",
       "      <td>0.005054</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>peak_power_rpm</td>\n",
       "      <td>0.004368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>maximum_power_Kw</td>\n",
       "      <td>0.003276</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Variable  Importance\n",
       "2                 age_of_car    0.495089\n",
       "1              policy_tenure    0.209197\n",
       "3        age_of_policyholder    0.161262\n",
       "4         population_density    0.067101\n",
       "10                 footprint    0.012005\n",
       "6             maximum_torque    0.011173\n",
       "9               aspect_ratio    0.009333\n",
       "0                      model    0.008827\n",
       "12              safety_index    0.007339\n",
       "7   torque_power_ratio_Nm/Kw    0.005977\n",
       "11                 volume_M3    0.005054\n",
       "8             peak_power_rpm    0.004368\n",
       "5           maximum_power_Kw    0.003276"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting important features\n",
    "\n",
    "dfeat = pd.DataFrame()\n",
    "dfeat['Variable'] = xtrain.columns\n",
    "dfeat['Importance'] = dt1.feature_importances_\n",
    "tempdf = dfeat.sort_values(by= 'Importance', ascending= False)\n",
    "tempdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "f4c24197",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Importance', ylabel='Variable'>"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(tempdf['Importance'], tempdf['Variable'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "b4e06475",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00     38391\n",
      "           1       1.00      1.00      1.00     19195\n",
      "\n",
      "    accuracy                           1.00     57586\n",
      "   macro avg       1.00      1.00      1.00     57586\n",
      "weighted avg       1.00      1.00      1.00     57586\n",
      "\n",
      "[[38391     0]\n",
      " [    0 19195]]\n",
      "\n",
      "Test data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.88      0.94      0.91     16453\n",
      "           1       0.87      0.75      0.80      8227\n",
      "\n",
      "    accuracy                           0.88     24680\n",
      "   macro avg       0.87      0.84      0.86     24680\n",
      "weighted avg       0.88      0.88      0.87     24680\n",
      "\n",
      "[[15494   959]\n",
      " [ 2078  6149]]\n"
     ]
    }
   ],
   "source": [
    "# Random Forest model\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "m=RandomForestClassifier(oob_score=True)\n",
    "m.fit(xtrain,ytrain)\n",
    "from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n",
    "accuracy_score(ytest,m.predict(xtest))\n",
    "\n",
    "print('Training data report')\n",
    "print(classification_report(ytrain,m.predict(xtrain)))\n",
    "print(confusion_matrix(ytrain,m.predict(xtrain)))\n",
    "print()\n",
    "print('Test data report')\n",
    "print(classification_report(ytest,m.predict(xtest)))\n",
    "print(confusion_matrix(ytest,m.predict(xtest)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "01164595",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Logistic_regression with youden_index(threshold)</td>\n",
       "      <td>0.519117</td>\n",
       "      <td>0.342658</td>\n",
       "      <td>0.938009</td>\n",
       "      <td>0.379498</td>\n",
       "      <td>0.026656</td>\n",
       "      <td>0.501951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.852069</td>\n",
       "      <td>0.788543</td>\n",
       "      <td>0.813176</td>\n",
       "      <td>0.865032</td>\n",
       "      <td>0.698682</td>\n",
       "      <td>0.80067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Decision Tree with criterion:entropy,max_depth...</td>\n",
       "      <td>0.610185</td>\n",
       "      <td>0.865317</td>\n",
       "      <td>0.238969</td>\n",
       "      <td>0.733914</td>\n",
       "      <td>0.269056</td>\n",
       "      <td>0.374512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.844565</td>\n",
       "      <td>0.865082</td>\n",
       "      <td>0.747417</td>\n",
       "      <td>0.876945</td>\n",
       "      <td>0.713386</td>\n",
       "      <td>0.801956</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Model_Name AUC Score  \\\n",
       "0                                Logistic_regression       0.5   \n",
       "1   Logistic_regression with youden_index(threshold)  0.519117   \n",
       "2                                      Decision Tree  0.852069   \n",
       "3  Decision Tree with criterion:entropy,max_depth...  0.610185   \n",
       "4                                      Random Forest  0.844565   \n",
       "\n",
       "  Precision Score Recall Score Accuracy Score Kappa Score  f1-score  \n",
       "0             0.0          0.0       0.666653         0.0       0.0  \n",
       "1        0.342658     0.938009       0.379498    0.026656  0.501951  \n",
       "2        0.788543     0.813176       0.865032    0.698682   0.80067  \n",
       "3        0.865317     0.238969       0.733914    0.269056  0.374512  \n",
       "4        0.865082     0.747417       0.876945    0.713386  0.801956  "
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ypred=m.predict(xtest)\n",
    "models_df = models_df.append({'Model_Name':'Random Forest','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "2effe88b",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=m.predict(x)\n",
    "ytest=y\n",
    "models_df2 = models_df2.append({'Model_Name':'Random Forest','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df2\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "0c447905",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.70      0.97      0.81     38391\n",
      "           1       0.74      0.15      0.24     19195\n",
      "\n",
      "    accuracy                           0.70     57586\n",
      "   macro avg       0.72      0.56      0.53     57586\n",
      "weighted avg       0.71      0.70      0.62     57586\n",
      "\n",
      "[[37387  1004]\n",
      " [16391  2804]]\n",
      "\n",
      "Test data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.69      0.97      0.81     16453\n",
      "           1       0.73      0.14      0.23      8227\n",
      "\n",
      "    accuracy                           0.70     24680\n",
      "   macro avg       0.71      0.56      0.52     24680\n",
      "weighted avg       0.70      0.70      0.62     24680\n",
      "\n",
      "[[16026   427]\n",
      " [ 7091  1136]]\n"
     ]
    }
   ],
   "source": [
    "## Random Forest with hyperparameter tuning\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "\n",
    "m=RandomForestClassifier(n_estimators=10, oob_score=True, max_depth=7)\n",
    "\n",
    "m.fit(xtrain,ytrain)\n",
    "from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n",
    "accuracy_score(ytest,m.predict(xtest))\n",
    "\n",
    "print('Training data report')\n",
    "print(classification_report(ytrain,m.predict(xtrain)))\n",
    "print(confusion_matrix(ytrain,m.predict(xtrain)))\n",
    "print()\n",
    "print('Test data report')\n",
    "print(classification_report(ytest,m.predict(xtest)))\n",
    "print(confusion_matrix(ytest,m.predict(xtest)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "d37bab37",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=m.predict(xtest)\n",
    "models_df = models_df.append({'Model_Name':'Random Forest : tuning(10 trees, max_dept=10)','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "d342cd11",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=m.predict(x)\n",
    "ytest=y\n",
    "models_df2 = models_df2.append({'Model_Name':'Random Forest : tuning(10 trees, max_dept=10)','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df2\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "198c0378",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.72      0.94      0.82     38391\n",
      "           1       0.70      0.26      0.38     19195\n",
      "\n",
      "    accuracy                           0.72     57586\n",
      "   macro avg       0.71      0.60      0.60     57586\n",
      "weighted avg       0.71      0.72      0.67     57586\n",
      "\n",
      "[[36257  2134]\n",
      " [14245  4950]]\n",
      "\n",
      "Test data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.71      0.94      0.81     16453\n",
      "           1       0.68      0.25      0.36      8227\n",
      "\n",
      "    accuracy                           0.71     24680\n",
      "   macro avg       0.70      0.60      0.59     24680\n",
      "weighted avg       0.70      0.71      0.66     24680\n",
      "\n",
      "[[15506   947]\n",
      " [ 6190  2037]]\n"
     ]
    }
   ],
   "source": [
    "# Ensembling model: AdaBoost\n",
    "\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)\n",
    "m=AdaBoostClassifier()\n",
    "\n",
    "m.fit(xtrain,ytrain)\n",
    "from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n",
    "accuracy_score(ytest,m.predict(xtest))\n",
    "\n",
    "print('Training data report')\n",
    "print(classification_report(ytrain,m.predict(xtrain)))\n",
    "print(confusion_matrix(ytrain,m.predict(xtrain)))\n",
    "print()\n",
    "print('Test data report')\n",
    "print(classification_report(ytest,m.predict(xtest)))\n",
    "print(confusion_matrix(ytest,m.predict(xtest)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "f94ad8cd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Logistic_regression with youden_index(threshold)</td>\n",
       "      <td>0.519117</td>\n",
       "      <td>0.342658</td>\n",
       "      <td>0.938009</td>\n",
       "      <td>0.379498</td>\n",
       "      <td>0.026656</td>\n",
       "      <td>0.501951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.852069</td>\n",
       "      <td>0.788543</td>\n",
       "      <td>0.813176</td>\n",
       "      <td>0.865032</td>\n",
       "      <td>0.698682</td>\n",
       "      <td>0.80067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Decision Tree with criterion:entropy,max_depth...</td>\n",
       "      <td>0.610185</td>\n",
       "      <td>0.865317</td>\n",
       "      <td>0.238969</td>\n",
       "      <td>0.733914</td>\n",
       "      <td>0.269056</td>\n",
       "      <td>0.374512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.844565</td>\n",
       "      <td>0.865082</td>\n",
       "      <td>0.747417</td>\n",
       "      <td>0.876945</td>\n",
       "      <td>0.713386</td>\n",
       "      <td>0.801956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Random Forest : tuning(10 trees, max_dept=10)</td>\n",
       "      <td>0.556065</td>\n",
       "      <td>0.726807</td>\n",
       "      <td>0.138082</td>\n",
       "      <td>0.695381</td>\n",
       "      <td>0.140599</td>\n",
       "      <td>0.232074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ada boost</td>\n",
       "      <td>0.595021</td>\n",
       "      <td>0.682641</td>\n",
       "      <td>0.247599</td>\n",
       "      <td>0.710818</td>\n",
       "      <td>0.226055</td>\n",
       "      <td>0.363393</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Model_Name AUC Score  \\\n",
       "0                                Logistic_regression       0.5   \n",
       "1   Logistic_regression with youden_index(threshold)  0.519117   \n",
       "2                                      Decision Tree  0.852069   \n",
       "3  Decision Tree with criterion:entropy,max_depth...  0.610185   \n",
       "4                                      Random Forest  0.844565   \n",
       "5      Random Forest : tuning(10 trees, max_dept=10)  0.556065   \n",
       "6                                          ada boost  0.595021   \n",
       "\n",
       "  Precision Score Recall Score Accuracy Score Kappa Score  f1-score  \n",
       "0             0.0          0.0       0.666653         0.0       0.0  \n",
       "1        0.342658     0.938009       0.379498    0.026656  0.501951  \n",
       "2        0.788543     0.813176       0.865032    0.698682   0.80067  \n",
       "3        0.865317     0.238969       0.733914    0.269056  0.374512  \n",
       "4        0.865082     0.747417       0.876945    0.713386  0.801956  \n",
       "5        0.726807     0.138082       0.695381    0.140599  0.232074  \n",
       "6        0.682641     0.247599       0.710818    0.226055  0.363393  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ypred=m.predict(xtest)\n",
    "models_df = models_df.append({'Model_Name':'ada boost','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "a53c84ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=m.predict(x)\n",
    "ytest=y\n",
    "models_df2 = models_df2.append({'Model_Name':'ada boost','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df2\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "b599eec2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.99      0.90     38391\n",
      "           1       0.96      0.59      0.73     19195\n",
      "\n",
      "    accuracy                           0.85     57586\n",
      "   macro avg       0.90      0.79      0.81     57586\n",
      "weighted avg       0.87      0.85      0.84     57586\n",
      "\n",
      "[[37981   410]\n",
      " [ 7956 11239]]\n",
      "\n",
      "Test data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.99      0.90     16453\n",
      "           1       0.97      0.58      0.73      8227\n",
      "\n",
      "    accuracy                           0.85     24680\n",
      "   macro avg       0.90      0.79      0.81     24680\n",
      "weighted avg       0.87      0.85      0.84     24680\n",
      "\n",
      "[[16279   174]\n",
      " [ 3422  4805]]\n"
     ]
    }
   ],
   "source": [
    "# Ensembling model: GradientBoosting\n",
    "\n",
    "m=GradientBoostingClassifier()\n",
    "m.fit(xtrain,ytrain)\n",
    "from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n",
    "accuracy_score(ytest,m.predict(xtest))\n",
    "\n",
    "print('Training data report')\n",
    "print(classification_report(ytrain,m.predict(xtrain)))\n",
    "print(confusion_matrix(ytrain,m.predict(xtrain)))\n",
    "print()\n",
    "print('Test data report')\n",
    "print(classification_report(ytest,m.predict(xtest)))\n",
    "print(confusion_matrix(ytest,m.predict(xtest)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "023a5f94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Logistic_regression with youden_index(threshold)</td>\n",
       "      <td>0.519117</td>\n",
       "      <td>0.342658</td>\n",
       "      <td>0.938009</td>\n",
       "      <td>0.379498</td>\n",
       "      <td>0.026656</td>\n",
       "      <td>0.501951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.852069</td>\n",
       "      <td>0.788543</td>\n",
       "      <td>0.813176</td>\n",
       "      <td>0.865032</td>\n",
       "      <td>0.698682</td>\n",
       "      <td>0.80067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Decision Tree with criterion:entropy,max_depth...</td>\n",
       "      <td>0.610185</td>\n",
       "      <td>0.865317</td>\n",
       "      <td>0.238969</td>\n",
       "      <td>0.733914</td>\n",
       "      <td>0.269056</td>\n",
       "      <td>0.374512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.844565</td>\n",
       "      <td>0.865082</td>\n",
       "      <td>0.747417</td>\n",
       "      <td>0.876945</td>\n",
       "      <td>0.713386</td>\n",
       "      <td>0.801956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Random Forest : tuning(10 trees, max_dept=10)</td>\n",
       "      <td>0.556065</td>\n",
       "      <td>0.726807</td>\n",
       "      <td>0.138082</td>\n",
       "      <td>0.695381</td>\n",
       "      <td>0.140599</td>\n",
       "      <td>0.232074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ada boost</td>\n",
       "      <td>0.595021</td>\n",
       "      <td>0.682641</td>\n",
       "      <td>0.247599</td>\n",
       "      <td>0.710818</td>\n",
       "      <td>0.226055</td>\n",
       "      <td>0.363393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Gradient Boosting</td>\n",
       "      <td>0.786738</td>\n",
       "      <td>0.965053</td>\n",
       "      <td>0.584053</td>\n",
       "      <td>0.854295</td>\n",
       "      <td>0.636273</td>\n",
       "      <td>0.7277</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Model_Name AUC Score  \\\n",
       "0                                Logistic_regression       0.5   \n",
       "1   Logistic_regression with youden_index(threshold)  0.519117   \n",
       "2                                      Decision Tree  0.852069   \n",
       "3  Decision Tree with criterion:entropy,max_depth...  0.610185   \n",
       "4                                      Random Forest  0.844565   \n",
       "5      Random Forest : tuning(10 trees, max_dept=10)  0.556065   \n",
       "6                                          ada boost  0.595021   \n",
       "7                                  Gradient Boosting  0.786738   \n",
       "\n",
       "  Precision Score Recall Score Accuracy Score Kappa Score  f1-score  \n",
       "0             0.0          0.0       0.666653         0.0       0.0  \n",
       "1        0.342658     0.938009       0.379498    0.026656  0.501951  \n",
       "2        0.788543     0.813176       0.865032    0.698682   0.80067  \n",
       "3        0.865317     0.238969       0.733914    0.269056  0.374512  \n",
       "4        0.865082     0.747417       0.876945    0.713386  0.801956  \n",
       "5        0.726807     0.138082       0.695381    0.140599  0.232074  \n",
       "6        0.682641     0.247599       0.710818    0.226055  0.363393  \n",
       "7        0.965053     0.584053       0.854295    0.636273    0.7277  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ypred=m.predict(xtest)\n",
    "models_df = models_df.append({'Model_Name':'Gradient Boosting','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "61f0b728",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=m.predict(x)\n",
    "ytest=y\n",
    "models_df2 = models_df2.append({'Model_Name':'Gradient Boosting','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df2\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "fcb83dcb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      1.00      0.96     38391\n",
      "           1       1.00      0.84      0.91     19195\n",
      "\n",
      "    accuracy                           0.95     57586\n",
      "   macro avg       0.96      0.92      0.94     57586\n",
      "weighted avg       0.95      0.95      0.94     57586\n",
      "\n",
      "[[38344    47]\n",
      " [ 3072 16123]]\n",
      "\n",
      "Test data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.92      1.00      0.96     16453\n",
      "           1       0.99      0.83      0.91      8227\n",
      "\n",
      "    accuracy                           0.94     24680\n",
      "   macro avg       0.96      0.92      0.93     24680\n",
      "weighted avg       0.95      0.94      0.94     24680\n",
      "\n",
      "[[16411    42]\n",
      " [ 1359  6868]]\n"
     ]
    }
   ],
   "source": [
    "# Ensembling model: XGBoost\n",
    "from xgboost import XGBClassifier\n",
    "m=XGBClassifier()\n",
    "m.fit(xtrain,ytrain)\n",
    "from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\n",
    "accuracy_score(ytest,m.predict(xtest))\n",
    "\n",
    "print('Training data report')\n",
    "print(classification_report(ytrain,m.predict(xtrain)))\n",
    "print(confusion_matrix(ytrain,m.predict(xtrain)))\n",
    "print()\n",
    "print('Test data report')\n",
    "print(classification_report(ytest,m.predict(xtest)))\n",
    "print(confusion_matrix(ytest,m.predict(xtest)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "a29ce586",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Logistic_regression with youden_index(threshold)</td>\n",
       "      <td>0.519117</td>\n",
       "      <td>0.342658</td>\n",
       "      <td>0.938009</td>\n",
       "      <td>0.379498</td>\n",
       "      <td>0.026656</td>\n",
       "      <td>0.501951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.852069</td>\n",
       "      <td>0.788543</td>\n",
       "      <td>0.813176</td>\n",
       "      <td>0.865032</td>\n",
       "      <td>0.698682</td>\n",
       "      <td>0.80067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Decision Tree with criterion:entropy,max_depth...</td>\n",
       "      <td>0.610185</td>\n",
       "      <td>0.865317</td>\n",
       "      <td>0.238969</td>\n",
       "      <td>0.733914</td>\n",
       "      <td>0.269056</td>\n",
       "      <td>0.374512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.844565</td>\n",
       "      <td>0.865082</td>\n",
       "      <td>0.747417</td>\n",
       "      <td>0.876945</td>\n",
       "      <td>0.713386</td>\n",
       "      <td>0.801956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Random Forest : tuning(10 trees, max_dept=10)</td>\n",
       "      <td>0.556065</td>\n",
       "      <td>0.726807</td>\n",
       "      <td>0.138082</td>\n",
       "      <td>0.695381</td>\n",
       "      <td>0.140599</td>\n",
       "      <td>0.232074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ada boost</td>\n",
       "      <td>0.595021</td>\n",
       "      <td>0.682641</td>\n",
       "      <td>0.247599</td>\n",
       "      <td>0.710818</td>\n",
       "      <td>0.226055</td>\n",
       "      <td>0.363393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Gradient Boosting</td>\n",
       "      <td>0.786738</td>\n",
       "      <td>0.965053</td>\n",
       "      <td>0.584053</td>\n",
       "      <td>0.854295</td>\n",
       "      <td>0.636273</td>\n",
       "      <td>0.7277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>XGBClassifier</td>\n",
       "      <td>0.91613</td>\n",
       "      <td>0.993922</td>\n",
       "      <td>0.834812</td>\n",
       "      <td>0.943233</td>\n",
       "      <td>0.866953</td>\n",
       "      <td>0.907445</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Model_Name AUC Score  \\\n",
       "0                                Logistic_regression       0.5   \n",
       "1   Logistic_regression with youden_index(threshold)  0.519117   \n",
       "2                                      Decision Tree  0.852069   \n",
       "3  Decision Tree with criterion:entropy,max_depth...  0.610185   \n",
       "4                                      Random Forest  0.844565   \n",
       "5      Random Forest : tuning(10 trees, max_dept=10)  0.556065   \n",
       "6                                          ada boost  0.595021   \n",
       "7                                  Gradient Boosting  0.786738   \n",
       "8                                      XGBClassifier   0.91613   \n",
       "\n",
       "  Precision Score Recall Score Accuracy Score Kappa Score  f1-score  \n",
       "0             0.0          0.0       0.666653         0.0       0.0  \n",
       "1        0.342658     0.938009       0.379498    0.026656  0.501951  \n",
       "2        0.788543     0.813176       0.865032    0.698682   0.80067  \n",
       "3        0.865317     0.238969       0.733914    0.269056  0.374512  \n",
       "4        0.865082     0.747417       0.876945    0.713386  0.801956  \n",
       "5        0.726807     0.138082       0.695381    0.140599  0.232074  \n",
       "6        0.682641     0.247599       0.710818    0.226055  0.363393  \n",
       "7        0.965053     0.584053       0.854295    0.636273    0.7277  \n",
       "8        0.993922     0.834812       0.943233    0.866953  0.907445  "
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ypred=m.predict(xtest)\n",
    "models_df = models_df.append({'Model_Name':'XGBClassifier','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "83a2f99b",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=m.predict(x)\n",
    "ytest=y\n",
    "models_df2 = models_df2.append({'Model_Name':'XGBClassifier','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df2\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "52704f05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.98      0.99      0.98     38391\n",
      "           1       0.98      0.95      0.97     19195\n",
      "\n",
      "    accuracy                           0.98     57586\n",
      "   macro avg       0.98      0.97      0.98     57586\n",
      "weighted avg       0.98      0.98      0.98     57586\n",
      "\n",
      "[[38088   303]\n",
      " [  896 18299]]\n",
      "\n",
      "Test data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.86      0.90      0.88     16453\n",
      "           1       0.78      0.70      0.74      8227\n",
      "\n",
      "    accuracy                           0.83     24680\n",
      "   macro avg       0.82      0.80      0.81     24680\n",
      "weighted avg       0.83      0.83      0.83     24680\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import StackingClassifier\n",
    "s=StackingClassifier([('rf',RandomForestClassifier(n_estimators=5)),('gbc',GradientBoostingClassifier(n_estimators=15))])\n",
    "s.fit(xtrain,ytrain)\n",
    "\n",
    "print('Training data report')\n",
    "print(classification_report(ytrain,s.predict(xtrain)))\n",
    "print(confusion_matrix(ytrain,s.predict(xtrain)))\n",
    "print()\n",
    "print('Test data report')\n",
    "print(classification_report(ytest,s.predict(xtest)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "d49c3f7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Logistic_regression with youden_index(threshold)</td>\n",
       "      <td>0.519117</td>\n",
       "      <td>0.342658</td>\n",
       "      <td>0.938009</td>\n",
       "      <td>0.379498</td>\n",
       "      <td>0.026656</td>\n",
       "      <td>0.501951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.852069</td>\n",
       "      <td>0.788543</td>\n",
       "      <td>0.813176</td>\n",
       "      <td>0.865032</td>\n",
       "      <td>0.698682</td>\n",
       "      <td>0.80067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Decision Tree with criterion:entropy,max_depth...</td>\n",
       "      <td>0.610185</td>\n",
       "      <td>0.865317</td>\n",
       "      <td>0.238969</td>\n",
       "      <td>0.733914</td>\n",
       "      <td>0.269056</td>\n",
       "      <td>0.374512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.844565</td>\n",
       "      <td>0.865082</td>\n",
       "      <td>0.747417</td>\n",
       "      <td>0.876945</td>\n",
       "      <td>0.713386</td>\n",
       "      <td>0.801956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Random Forest : tuning(10 trees, max_dept=10)</td>\n",
       "      <td>0.556065</td>\n",
       "      <td>0.726807</td>\n",
       "      <td>0.138082</td>\n",
       "      <td>0.695381</td>\n",
       "      <td>0.140599</td>\n",
       "      <td>0.232074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ada boost</td>\n",
       "      <td>0.595021</td>\n",
       "      <td>0.682641</td>\n",
       "      <td>0.247599</td>\n",
       "      <td>0.710818</td>\n",
       "      <td>0.226055</td>\n",
       "      <td>0.363393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Gradient Boosting</td>\n",
       "      <td>0.786738</td>\n",
       "      <td>0.965053</td>\n",
       "      <td>0.584053</td>\n",
       "      <td>0.854295</td>\n",
       "      <td>0.636273</td>\n",
       "      <td>0.7277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>XGBClassifier</td>\n",
       "      <td>0.91613</td>\n",
       "      <td>0.993922</td>\n",
       "      <td>0.834812</td>\n",
       "      <td>0.943233</td>\n",
       "      <td>0.866953</td>\n",
       "      <td>0.907445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Stacking Classifier</td>\n",
       "      <td>0.800836</td>\n",
       "      <td>0.782496</td>\n",
       "      <td>0.698797</td>\n",
       "      <td>0.834846</td>\n",
       "      <td>0.618202</td>\n",
       "      <td>0.738282</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          Model_Name AUC Score  \\\n",
       "0                                Logistic_regression       0.5   \n",
       "1   Logistic_regression with youden_index(threshold)  0.519117   \n",
       "2                                      Decision Tree  0.852069   \n",
       "3  Decision Tree with criterion:entropy,max_depth...  0.610185   \n",
       "4                                      Random Forest  0.844565   \n",
       "5      Random Forest : tuning(10 trees, max_dept=10)  0.556065   \n",
       "6                                          ada boost  0.595021   \n",
       "7                                  Gradient Boosting  0.786738   \n",
       "8                                      XGBClassifier   0.91613   \n",
       "9                                Stacking Classifier  0.800836   \n",
       "\n",
       "  Precision Score Recall Score Accuracy Score Kappa Score  f1-score  \n",
       "0             0.0          0.0       0.666653         0.0       0.0  \n",
       "1        0.342658     0.938009       0.379498    0.026656  0.501951  \n",
       "2        0.788543     0.813176       0.865032    0.698682   0.80067  \n",
       "3        0.865317     0.238969       0.733914    0.269056  0.374512  \n",
       "4        0.865082     0.747417       0.876945    0.713386  0.801956  \n",
       "5        0.726807     0.138082       0.695381    0.140599  0.232074  \n",
       "6        0.682641     0.247599       0.710818    0.226055  0.363393  \n",
       "7        0.965053     0.584053       0.854295    0.636273    0.7277  \n",
       "8        0.993922     0.834812       0.943233    0.866953  0.907445  \n",
       "9        0.782496     0.698797       0.834846    0.618202  0.738282  "
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ypred=s.predict(xtest)\n",
    "models_df = models_df.append({'Model_Name':'Stacking Classifier','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "88ec74f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=s.predict(x)\n",
    "ytest=y\n",
    "models_df2 = models_df2.append({'Model_Name':'Stacking Classifier','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df2\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "e6b04df8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      1.00      0.96     38391\n",
      "           1       1.00      0.85      0.92     19195\n",
      "\n",
      "    accuracy                           0.95     57586\n",
      "   macro avg       0.96      0.92      0.94     57586\n",
      "weighted avg       0.95      0.95      0.95     57586\n",
      "\n",
      "[[38380    11]\n",
      " [ 2953 16242]]\n",
      "\n",
      "Test data report\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.90      0.99      0.94     16453\n",
      "           1       0.99      0.77      0.86      8227\n",
      "\n",
      "    accuracy                           0.92     24680\n",
      "   macro avg       0.94      0.88      0.90     24680\n",
      "weighted avg       0.93      0.92      0.92     24680\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import VotingClassifier\n",
    "v=VotingClassifier(([('rf',RandomForestClassifier()),('xgb',XGBClassifier()),('gbc',GradientBoostingClassifier())]))\n",
    "v.fit(xtrain,ytrain)\n",
    "\n",
    "print('Training data report')\n",
    "print(classification_report(ytrain,v.predict(xtrain)))\n",
    "print(confusion_matrix(ytrain,v.predict(xtrain)))\n",
    "print()\n",
    "print('Test data report')\n",
    "print(classification_report(ytest,v.predict(xtest)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "36e8b50c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Logistic_regression with youden_index(threshold)</td>\n",
       "      <td>0.519117</td>\n",
       "      <td>0.342658</td>\n",
       "      <td>0.938009</td>\n",
       "      <td>0.379498</td>\n",
       "      <td>0.026656</td>\n",
       "      <td>0.501951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.852069</td>\n",
       "      <td>0.788543</td>\n",
       "      <td>0.813176</td>\n",
       "      <td>0.865032</td>\n",
       "      <td>0.698682</td>\n",
       "      <td>0.80067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Decision Tree with criterion:entropy,max_depth...</td>\n",
       "      <td>0.610185</td>\n",
       "      <td>0.865317</td>\n",
       "      <td>0.238969</td>\n",
       "      <td>0.733914</td>\n",
       "      <td>0.269056</td>\n",
       "      <td>0.374512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.844565</td>\n",
       "      <td>0.865082</td>\n",
       "      <td>0.747417</td>\n",
       "      <td>0.876945</td>\n",
       "      <td>0.713386</td>\n",
       "      <td>0.801956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Random Forest : tuning(10 trees, max_dept=10)</td>\n",
       "      <td>0.556065</td>\n",
       "      <td>0.726807</td>\n",
       "      <td>0.138082</td>\n",
       "      <td>0.695381</td>\n",
       "      <td>0.140599</td>\n",
       "      <td>0.232074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ada boost</td>\n",
       "      <td>0.595021</td>\n",
       "      <td>0.682641</td>\n",
       "      <td>0.247599</td>\n",
       "      <td>0.710818</td>\n",
       "      <td>0.226055</td>\n",
       "      <td>0.363393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Gradient Boosting</td>\n",
       "      <td>0.786738</td>\n",
       "      <td>0.965053</td>\n",
       "      <td>0.584053</td>\n",
       "      <td>0.854295</td>\n",
       "      <td>0.636273</td>\n",
       "      <td>0.7277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>XGBClassifier</td>\n",
       "      <td>0.91613</td>\n",
       "      <td>0.993922</td>\n",
       "      <td>0.834812</td>\n",
       "      <td>0.943233</td>\n",
       "      <td>0.866953</td>\n",
       "      <td>0.907445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Stacking Classifier</td>\n",
       "      <td>0.800836</td>\n",
       "      <td>0.782496</td>\n",
       "      <td>0.698797</td>\n",
       "      <td>0.834846</td>\n",
       "      <td>0.618202</td>\n",
       "      <td>0.738282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Voting Classifier</td>\n",
       "      <td>0.881822</td>\n",
       "      <td>0.985519</td>\n",
       "      <td>0.769296</td>\n",
       "      <td>0.919327</td>\n",
       "      <td>0.807957</td>\n",
       "      <td>0.864086</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           Model_Name AUC Score  \\\n",
       "0                                 Logistic_regression       0.5   \n",
       "1    Logistic_regression with youden_index(threshold)  0.519117   \n",
       "2                                       Decision Tree  0.852069   \n",
       "3   Decision Tree with criterion:entropy,max_depth...  0.610185   \n",
       "4                                       Random Forest  0.844565   \n",
       "5       Random Forest : tuning(10 trees, max_dept=10)  0.556065   \n",
       "6                                           ada boost  0.595021   \n",
       "7                                   Gradient Boosting  0.786738   \n",
       "8                                       XGBClassifier   0.91613   \n",
       "9                                 Stacking Classifier  0.800836   \n",
       "10                                  Voting Classifier  0.881822   \n",
       "\n",
       "   Precision Score Recall Score Accuracy Score Kappa Score  f1-score  \n",
       "0              0.0          0.0       0.666653         0.0       0.0  \n",
       "1         0.342658     0.938009       0.379498    0.026656  0.501951  \n",
       "2         0.788543     0.813176       0.865032    0.698682   0.80067  \n",
       "3         0.865317     0.238969       0.733914    0.269056  0.374512  \n",
       "4         0.865082     0.747417       0.876945    0.713386  0.801956  \n",
       "5         0.726807     0.138082       0.695381    0.140599  0.232074  \n",
       "6         0.682641     0.247599       0.710818    0.226055  0.363393  \n",
       "7         0.965053     0.584053       0.854295    0.636273    0.7277  \n",
       "8         0.993922     0.834812       0.943233    0.866953  0.907445  \n",
       "9         0.782496     0.698797       0.834846    0.618202  0.738282  \n",
       "10        0.985519     0.769296       0.919327    0.807957  0.864086  "
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ypred=v.predict(xtest)\n",
    "models_df = models_df.append({'Model_Name':'Voting Classifier','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "e4cf4948",
   "metadata": {},
   "outputs": [],
   "source": [
    "ypred=v.predict(x)\n",
    "ytest=y\n",
    "models_df2 = models_df2.append({'Model_Name':'Voting Classifier','AUC Score' : metrics.roc_auc_score(ytest, ypred),\n",
    "                                    'Precision Score': metrics.precision_score(ytest, ypred),\n",
    "                                    'Recall Score': metrics.recall_score(ytest, ypred),\n",
    "                                    'Accuracy Score': metrics.accuracy_score(ytest, ypred),\n",
    "                                    'Kappa Score':metrics.cohen_kappa_score(ytest, ypred),\n",
    "                                    'f1-score': metrics.f1_score(ytest, ypred)}, \n",
    "                                    ignore_index = True)\n",
    "models_df2\n",
    "xtrain,xtest,ytrain,ytest=train_test_split(xr,yr,test_size=0.3,stratify=yr,random_state=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "2c1c0245",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>XGBClassifier</td>\n",
       "      <td>0.91613</td>\n",
       "      <td>0.993922</td>\n",
       "      <td>0.834812</td>\n",
       "      <td>0.943233</td>\n",
       "      <td>0.866953</td>\n",
       "      <td>0.907445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Voting Classifier</td>\n",
       "      <td>0.881822</td>\n",
       "      <td>0.985519</td>\n",
       "      <td>0.769296</td>\n",
       "      <td>0.919327</td>\n",
       "      <td>0.807957</td>\n",
       "      <td>0.864086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.844565</td>\n",
       "      <td>0.865082</td>\n",
       "      <td>0.747417</td>\n",
       "      <td>0.876945</td>\n",
       "      <td>0.713386</td>\n",
       "      <td>0.801956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.852069</td>\n",
       "      <td>0.788543</td>\n",
       "      <td>0.813176</td>\n",
       "      <td>0.865032</td>\n",
       "      <td>0.698682</td>\n",
       "      <td>0.80067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Stacking Classifier</td>\n",
       "      <td>0.800836</td>\n",
       "      <td>0.782496</td>\n",
       "      <td>0.698797</td>\n",
       "      <td>0.834846</td>\n",
       "      <td>0.618202</td>\n",
       "      <td>0.738282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Gradient Boosting</td>\n",
       "      <td>0.786738</td>\n",
       "      <td>0.965053</td>\n",
       "      <td>0.584053</td>\n",
       "      <td>0.854295</td>\n",
       "      <td>0.636273</td>\n",
       "      <td>0.7277</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Logistic_regression with youden_index(threshold)</td>\n",
       "      <td>0.519117</td>\n",
       "      <td>0.342658</td>\n",
       "      <td>0.938009</td>\n",
       "      <td>0.379498</td>\n",
       "      <td>0.026656</td>\n",
       "      <td>0.501951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Decision Tree with criterion:entropy,max_depth...</td>\n",
       "      <td>0.610185</td>\n",
       "      <td>0.865317</td>\n",
       "      <td>0.238969</td>\n",
       "      <td>0.733914</td>\n",
       "      <td>0.269056</td>\n",
       "      <td>0.374512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ada boost</td>\n",
       "      <td>0.595021</td>\n",
       "      <td>0.682641</td>\n",
       "      <td>0.247599</td>\n",
       "      <td>0.710818</td>\n",
       "      <td>0.226055</td>\n",
       "      <td>0.363393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Random Forest : tuning(10 trees, max_dept=10)</td>\n",
       "      <td>0.556065</td>\n",
       "      <td>0.726807</td>\n",
       "      <td>0.138082</td>\n",
       "      <td>0.695381</td>\n",
       "      <td>0.140599</td>\n",
       "      <td>0.232074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666653</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           Model_Name AUC Score  \\\n",
       "8                                       XGBClassifier   0.91613   \n",
       "10                                  Voting Classifier  0.881822   \n",
       "4                                       Random Forest  0.844565   \n",
       "2                                       Decision Tree  0.852069   \n",
       "9                                 Stacking Classifier  0.800836   \n",
       "7                                   Gradient Boosting  0.786738   \n",
       "1    Logistic_regression with youden_index(threshold)  0.519117   \n",
       "3   Decision Tree with criterion:entropy,max_depth...  0.610185   \n",
       "6                                           ada boost  0.595021   \n",
       "5       Random Forest : tuning(10 trees, max_dept=10)  0.556065   \n",
       "0                                 Logistic_regression       0.5   \n",
       "\n",
       "   Precision Score Recall Score Accuracy Score Kappa Score  f1-score  \n",
       "8         0.993922     0.834812       0.943233    0.866953  0.907445  \n",
       "10        0.985519     0.769296       0.919327    0.807957  0.864086  \n",
       "4         0.865082     0.747417       0.876945    0.713386  0.801956  \n",
       "2         0.788543     0.813176       0.865032    0.698682   0.80067  \n",
       "9         0.782496     0.698797       0.834846    0.618202  0.738282  \n",
       "7         0.965053     0.584053       0.854295    0.636273    0.7277  \n",
       "1         0.342658     0.938009       0.379498    0.026656  0.501951  \n",
       "3         0.865317     0.238969       0.733914    0.269056  0.374512  \n",
       "6         0.682641     0.247599       0.710818    0.226055  0.363393  \n",
       "5         0.726807     0.138082       0.695381    0.140599  0.232074  \n",
       "0              0.0          0.0       0.666653         0.0       0.0  "
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models_df.sort_values(by='f1-score', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e25fa0c6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "384bd2fb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "785b4771",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model_Name</th>\n",
       "      <th>AUC Score</th>\n",
       "      <th>Precision Score</th>\n",
       "      <th>Recall Score</th>\n",
       "      <th>Accuracy Score</th>\n",
       "      <th>Kappa Score</th>\n",
       "      <th>f1-score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Logistic_regression</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.936032</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Logistic_regression with youden_index(threshold)</td>\n",
       "      <td>0.512873</td>\n",
       "      <td>0.065672</td>\n",
       "      <td>0.928762</td>\n",
       "      <td>0.150191</td>\n",
       "      <td>0.003615</td>\n",
       "      <td>0.12267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Decision Tree</td>\n",
       "      <td>0.877321</td>\n",
       "      <td>0.621918</td>\n",
       "      <td>0.787353</td>\n",
       "      <td>0.955779</td>\n",
       "      <td>0.671441</td>\n",
       "      <td>0.694925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Decision Tree with criterion:entropy,max_depth...</td>\n",
       "      <td>0.518971</td>\n",
       "      <td>0.174709</td>\n",
       "      <td>0.05603</td>\n",
       "      <td>0.922686</td>\n",
       "      <td>0.055506</td>\n",
       "      <td>0.084848</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Random Forest</td>\n",
       "      <td>0.897474</td>\n",
       "      <td>0.76049</td>\n",
       "      <td>0.812433</td>\n",
       "      <td>0.971634</td>\n",
       "      <td>0.770434</td>\n",
       "      <td>0.785604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Random Forest : tuning(10 trees, max_dept=10)</td>\n",
       "      <td>0.525641</td>\n",
       "      <td>0.168507</td>\n",
       "      <td>0.077375</td>\n",
       "      <td>0.916559</td>\n",
       "      <td>0.068553</td>\n",
       "      <td>0.106052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>ada boost</td>\n",
       "      <td>0.521004</td>\n",
       "      <td>0.106698</td>\n",
       "      <td>0.098186</td>\n",
       "      <td>0.889729</td>\n",
       "      <td>0.04363</td>\n",
       "      <td>0.102265</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Gradient Boosting</td>\n",
       "      <td>0.508416</td>\n",
       "      <td>0.149927</td>\n",
       "      <td>0.027481</td>\n",
       "      <td>0.927823</td>\n",
       "      <td>0.027169</td>\n",
       "      <td>0.046449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>XGBClassifier</td>\n",
       "      <td>0.511462</td>\n",
       "      <td>0.508287</td>\n",
       "      <td>0.024546</td>\n",
       "      <td>0.936083</td>\n",
       "      <td>0.04118</td>\n",
       "      <td>0.046831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Stacking Classifier</td>\n",
       "      <td>0.844996</td>\n",
       "      <td>0.588261</td>\n",
       "      <td>0.724653</td>\n",
       "      <td>0.949942</td>\n",
       "      <td>0.622732</td>\n",
       "      <td>0.649372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Voting Classifier</td>\n",
       "      <td>0.521597</td>\n",
       "      <td>0.619048</td>\n",
       "      <td>0.045091</td>\n",
       "      <td>0.937142</td>\n",
       "      <td>0.076033</td>\n",
       "      <td>0.084059</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                           Model_Name AUC Score  \\\n",
       "0                                 Logistic_regression       0.5   \n",
       "1    Logistic_regression with youden_index(threshold)  0.512873   \n",
       "2                                       Decision Tree  0.877321   \n",
       "3   Decision Tree with criterion:entropy,max_depth...  0.518971   \n",
       "4                                       Random Forest  0.897474   \n",
       "5       Random Forest : tuning(10 trees, max_dept=10)  0.525641   \n",
       "6                                           ada boost  0.521004   \n",
       "7                                   Gradient Boosting  0.508416   \n",
       "8                                       XGBClassifier  0.511462   \n",
       "9                                 Stacking Classifier  0.844996   \n",
       "10                                  Voting Classifier  0.521597   \n",
       "\n",
       "   Precision Score Recall Score Accuracy Score Kappa Score  f1-score  \n",
       "0              0.0          0.0       0.936032         0.0       0.0  \n",
       "1         0.065672     0.928762       0.150191    0.003615   0.12267  \n",
       "2         0.621918     0.787353       0.955779    0.671441  0.694925  \n",
       "3         0.174709      0.05603       0.922686    0.055506  0.084848  \n",
       "4          0.76049     0.812433       0.971634    0.770434  0.785604  \n",
       "5         0.168507     0.077375       0.916559    0.068553  0.106052  \n",
       "6         0.106698     0.098186       0.889729     0.04363  0.102265  \n",
       "7         0.149927     0.027481       0.927823    0.027169  0.046449  \n",
       "8         0.508287     0.024546       0.936083     0.04118  0.046831  \n",
       "9         0.588261     0.724653       0.949942    0.622732  0.649372  \n",
       "10        0.619048     0.045091       0.937142    0.076033  0.084059  "
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Metric table of original data with out upsampling\n",
    "models_df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "557bdcaa",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "077e8023",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2c9871d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72ff2283",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8b440f7",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edb1a252",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
